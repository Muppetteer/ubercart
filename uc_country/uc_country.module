<?php

/**
 * @file
 * Contains global Ubercart functions and store administration functionality.
 */


/**
 * Returns an array of country files that can be installed or updated.
 *
 * @return array
 *   Associative array keyed by the country's ISO 3166-1 numeric country
 *   code. Each key holds an array of two elements, 'file' and 'version',
 *   containing the file name for that country's .cif file and the .cif
 *   file version, respectively.
 */
function uc_country_import_list() {
  $dir = drupal_get_path('module', 'uc_country') . '/countries/';

  $countries = array();
  if (is_dir($dir)) {
    if ($dh = opendir($dir)) {
      while (($file = readdir($dh)) !== FALSE) {
        switch (filetype($dir . $file)) {
          case 'file':
            if (substr($file, -4, 4) == '.cif') {
              $pieces = explode('_', substr($file, 0, strlen($file) - 4));
              $country_id = intval($pieces[count($pieces) - 2]);
              $version = $pieces[count($pieces) - 1];

              if (!isset($countries[$country_id])) {
                $countries[$country_id]['version'] = $version;
                $countries[$country_id]['file'] = $file;
              }
              else {
                if ($version > $countries[$country_id]['version']) {
                  $countries[$country_id]['version'] = $version;
                  $countries[$country_id]['file'] = $file;
                }
              }
            }
            break;
        }
      }
      closedir($dh);
    }
  }

  return $countries;
}

/*
 * Retrieves a country's name from the database, using its ID.
 *
 * @param $id
 *   The country's ISO 3166-1 numeric identifier.
 */
function uc_country_get_by_id($id) {
  $country = \Drupal::service('country_manager')->getByProperty(['numeric' => $id]);
  return $country->name;
}

/**
 * Returns a list of all installed/available countries.
 *
 * @return array
 *   Associative array keyed by the country's ISO 3166-1 alpha_2 country
 *   code and containing the translated ISO 3166-1 country name.
 */
function uc_country_option_list() {
  $countries = entity_load_multiple_by_properties('uc_country', ['status' => TRUE]);
  $country_names = [];
  foreach ($countries as $alpha_2 => $country) {
    $country_names[$alpha_2] = t($country->name);
  }
  natcasesort($country_names);
  return $country_names;
}

/**
 * Helper function to return zone options, grouped by country.
 */
function uc_zone_option_list() {
  $options = array();
  $countries = entity_load_multiple_by_properties('uc_country', array('status' => TRUE));
  foreach ($countries as $country) {
    if (!empty($country->zones)) {
      $options[t($country->name)] = $country->zones;
    }
  }
  uksort($options, 'strnatcasecmp');

  return $options;
}


/**
 * Returns the code abbreviation for a zone based on the zone ID or name.
 */
function uc_get_zone_code($zone = NULL) {
  if (empty($zone)) {
    return FALSE;
  }

  if (is_numeric($zone)) {
    $result = db_query('SELECT zone_code FROM {uc_countries_zones} WHERE zone_id = :id', [':id' => $zone]);
  }
  else {
    $result = db_query('SELECT zone_code FROM {uc_countries_zones} WHERE zone_name = :name', [':name' => $zone]);
  }

  if ($row = $result->fetchObject()) {
    return $row->zone_code;
  }

  return FALSE;
}

/**
 * Returns country data based on the supplied criteria.
 *
 * @param $match
 *   An associative array of fields to match.
 * @param $sort
 *   The field to sort by.
 */
function uc_get_country_data($match = array(), $sort = 'country_name') {
  $valid_fields = array('country_id', 'country_name', 'country_iso_code_2', 'country_iso_code_3', 'version');

  if (!is_array($match)) {
    $match = array();
  }

  if (count($match) > 0) {
    $query = [];
    foreach ($match as $key => $value) {
      if (!in_array($key, $valid_fields)) {
        continue;
      }
      $query[$key] = $value;
    }
    $countries = entity_load_multiple_by_properties('uc_country', $query);
  }
  else {
    $countries = entity_load_multiple('uc_country');
  }
  $country_names = array();
  foreach ($countries as $id => $country) {
    $country_names[$country->numeric] = t($country->name);
  }
  natcasesort($country_names);
  return $country_names;
  return empty($countries) ? FALSE : $countries;
//  $valid_fields = array('country_id', 'country_name', 'country_iso_code_2', 'country_iso_code_3', 'version');
//
//  if (!is_array($match)) {
//    $match = array();
//  }
//  if (!in_array($sort, $valid_fields)) {
    $sort = 'country_name';
//  }
//
//  $query = db_select('uc_countries')
//    ->fields('uc_countries')
//    ->orderBy($sort);
//  if (count($match) > 0) {
//    foreach ($match as $key => $value) {
//      if (!in_array($key, $valid_fields)) {
//        continue;
//      }
//      $query->condition($key, $value);
//    }
//  }
//
//  $countries = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
//// @todo: can we replace with the following?
////  $countries = $query->execute()->fetchAllAssoc();
//
//  return empty($countries) ? FALSE : $countries;
//}
}

<?php

/**
 * @file
 * Install, update, and uninstall functions for the uc_store module.
 */

/**
 * Implements hook_requirements().
 */
function uc_store_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    $severities = array(
      'warning' => REQUIREMENT_WARNING,
      'error' => REQUIREMENT_ERROR,
    );

    module_load_include('inc', 'uc_store', 'uc_store.admin');
    $results = module_invoke_all('uc_store_status');
    foreach ($results as $status) {
      $requirements[] = array(
        'severity' => isset($severities[$status['status']]) ? $severities[$status['status']] : NULL,
        'title' => $status['title'],
        'value' => $status['desc'],
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function uc_store_schema() {
  $schema = array();

  $schema['uc_countries'] = array(
    'description' => 'Stores country information.',
    'fields' => array(
      'country_id' => array(
        'description' => 'Primary key: numeric ISO country code.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'country_name' => array(
        'description' => 'The country name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'country_iso_code_2' => array(
        'description' => 'The two-character ISO country code.',
        'type' => 'char',
        'length' => 2,
        'not null' => TRUE,
        'default' => '',
      ),
      'country_iso_code_3' => array(
        'description' => 'The three-character ISO country code.',
        'type' => 'char',
        'length' => 3,
        'not null' => TRUE,
        'default' => '',
      ),
      'version' => array(
        'description' => 'The version of the CIF that loaded the country information.',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'country_name' => array('country_name'),
    ),
    'primary key' => array('country_id'),
  );

  $schema['uc_zones'] = array(
    'description' => 'Stores state/province information within a country.',
    'fields' => array(
      'zone_id' => array(
        'description' => 'Primary key: the unique zone id.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'zone_country_id' => array(
        'description' => 'The {uc_countries}.country_id to which this zone belongs.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'zone_code' => array(
        'description' => 'Standard abbreviation of the zone name.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'zone_name' => array(
        'description' => 'The zone name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'zone_code' => array('zone_code'),
      'zone_country_id' => array('zone_country_id'),
    ),
    'primary key' => array('zone_id'),
    'foreign keys' => array(
      'uc_countries' => array(
        'table' => 'uc_countries',
        'columns' => array('zone_country_id' => 'country_id'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function uc_store_install() {
  // Set mail handler for all Ubercart modules
  variable_set('mail_system',
    array_merge(
      variable_get('mail_system', array('default-system' => 'Drupal\Core\Mail\PhpMail')),
      array(
        'uc_cart'  => 'Drupal\uc_store\Mail\UbercartMail',
        'uc_order' => 'Drupal\uc_store\Mail\UbercartMail',
        'uc_file'  => 'Drupal\uc_store\Mail\UbercartMail',
        'uc_roles' => 'Drupal\uc_store\Mail\UbercartMail',
        'uc_stock' => 'Drupal\uc_store\Mail\UbercartMail',
        'uc_store' => 'Drupal\uc_store\Mail\UbercartMail',
      )
    )
  );

  // Set the default store date format.
  config('system.date')
    ->set('formats.uc_store.name', t('Ubercart'))
    ->set('formats.uc_store.locked', 0)
    ->set('formats.uc_store.pattern.php', 'm/d/Y')
    ->save();

  // Install United States and Canada by default.
  $path = drupal_get_path('module', 'uc_store');
  require_once($path . '/countries/united_states_840_1.cif');
  require_once($path . '/countries/canada_124_2.cif');
  united_states_install();
  canada_install();
}

/**
 * Implements hook_uninstall().
 */
function uc_store_uninstall() {
  db_delete('variable')
    ->condition('name', 'uc_address_format_%', 'LIKE')
    ->execute();

  // Unset mail Ubercart hander in variable mail_system
  $mail_system = variable_get('mail_system', array('default-system' => 'Drupal\Core\Mail\PhpMail'));
  unset($mail_system['uc_cart']);
  unset($mail_system['uc_order']);
  unset($mail_system['uc_file']);
  unset($mail_system['uc_roles']);
  unset($mail_system['uc_stock']);
  unset($mail_system['uc_store']);
  variable_set('mail_system', $mail_system);
}

/**
 * Implements hook_update_last_removed().
 */
function uc_store_update_last_removed() {
  return 7300;
}

/**
 * Moves store settings from variable to config.
 */
function uc_store_update_8000() {
  update_variables_to_config('uc_store.settings', array(
    'uc_store_name' => 'name',
    'uc_store_email' => 'mail',
    'uc_store_email_include_name' => 'mail_include_name',
    'uc_store_phone' => 'phone',
    'uc_store_fax' => 'fax',
    'uc_store_help_page' => 'help_page',
    'uc_store_street1' => 'address.street1',
    'uc_store_street2' => 'address.street2',
    'uc_store_city' => 'address.city',
    'uc_store_zone' => 'address.zone',
    'uc_store_country' => 'address.country',
    'uc_store_postal_code' => 'address.postal_code',
    'uc_currency_code' => 'currency.code',
    'uc_currency_sign' => 'currency.symbol',
    'uc_sign_after_amount' => 'currency.symbol_after',
    'uc_currency_thou' => 'currency.thousands_marker',
    'uc_currency_dec' => 'currency.decimal_marker',
    'uc_currency_prec' => 'currency.precision',
    'uc_weight_unit' => 'units.weight',
    'uc_length_unit' => 'units.length',
    'uc_customer_list_address' => 'customer_address',
    'uc_footer_message' => 'footer_message',
  ));
  update_variable_del('uc_store_owner');
}

/**
 * Deletes unused variables.
 */
function uc_store_update_8001() {
  db_delete('variable')
    ->condition('name', 'uc_field_%', 'LIKE')
    ->execute();

  update_variable_del('uc_weight_format_lb');
  update_variable_del('uc_weight_format_oz');
  update_variable_del('uc_weight_format_kg');
  update_variable_del('uc_weight_format_g');
  update_variable_del('uc_length_format_in');
  update_variable_del('uc_length_format_ft');
  update_variable_del('uc_length_format_cm');
  update_variable_del('uc_length_format_mm');
}

/**
 * Upgrades address field settings.
 */
function uc_store_update_8002() {
  $status = update_variable_get('uc_address_fields', drupal_map_assoc(array('first_name', 'last_name', 'phone', 'company', 'street1', 'street2', 'city', 'zone', 'postal_code', 'country')));
  $required = update_variable_get('uc_address_fields_required', drupal_map_assoc(array('first_name', 'last_name', 'street1', 'city', 'zone', 'postal_code', 'country')));
  $weights = update_variable_get('uc_address_fields_weight', array('first_name' => 0, 'last_name' => 1, 'company' => 2, 'street1' => 3, 'street2' => 4, 'city' => 5, 'zone' => 6, 'country' => 7, 'postal_code' => 8, 'phone' => 9));

  $address_fields = array();
  foreach ($weights as $field => $weight) {
    $address_fields[$field]['status'] = !empty($status[$field]);
    $address_fields[$field]['required'] = !empty($required[$field]);
    $address_fields[$field]['weight'] = $weight;
  }

  \Drupal::config('uc_store.settings')
    ->set('address_fields', $address_fields)
    ->save();

  update_variable_del('uc_address_fields');
  update_variable_del('uc_address_fields_required');
  update_variable_del('uc_address_fields_weight');
}

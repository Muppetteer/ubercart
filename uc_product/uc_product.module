<?php

/**
 * @file
 * The product module for Ubercart.
 *
 * Provides information that is common to all products, and user-defined product
 * classes for more specification.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldInstanceConfig;
use Drupal\node\NodeInterface;
use Drupal\node\NodeTypeInterface;

/**
 * Implements hook_page_build().
 */
function uc_product_page_build(&$page) {
  $path = drupal_get_path('module', 'uc_product');
  $page['#attached']['css'][$path . '/css/uc_product.css'] = array('every_page' => TRUE);
}

/**
 * Implements hook_permission().
 */
function uc_product_permission() {
  $perms = array(
    'administer products' => array(
      'title' => t('Administer products'),
    ),
    'administer product classes' => array(
      'title' => t('Administer product classes'),
    ),
    'administer product features' => array(
      'title' => t('Administer product features'),
    ),
    'administer own product features' => array(
      'title' => t('Administer own product features'),
    ),
  );

  return $perms;
}

/**
 * Implements hook_theme().
 */
function uc_product_theme() {
  return array(
    'uc_product_model' => array(
      'variables' => array('model' => '', 'view_mode' => 'full', 'attributes' => array()),
      'file' => 'uc_product.theme.inc',
    ),
    'uc_product_price' => array(
      'render element' => 'element',
      'file' => 'uc_product.theme.inc',
    ),
    'uc_product_weight' => array(
      'variables' => array('amount' => 0, 'units' => NULL, 'view_mode' => 'full', 'attributes' => array()),
      'file' => 'uc_product.theme.inc',
    ),
    'uc_product_dimensions' => array(
      'variables' => array('length' => 0, 'width' => 0, 'height' => 0, 'units' => NULL, 'view_mode' => 'full', 'attributes' => array()),
      'file' => 'uc_product.theme.inc',
    ),
  );
}

/**
 * Theme preprocess function for Ubercart product image fields.
 */
function uc_product_preprocess_field(&$variables) {
  if ($variables['element']['#formatter'] == 'uc_product_image') {
    $variables['attributes']['class'][] = 'uc-product-image';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 */
function uc_product_form_node_form_alter(&$form, &$form_state) {
  $node = $form_state['controller']->getEntity();
  if (uc_product_is_product($node)) {
    $form['base'] = array(
      '#type' => 'details',
      '#title' => t('Product information'),
      '#weight' => 0,
      '#open' => TRUE,
    );
    $form['base']['model'] = array(
      '#type' => 'textfield',
      '#title' => t('SKU'),
      '#required' => TRUE,
      '#default_value' => $node->model,
      '#description' => t('Product SKU/model.'),
      '#weight' => 0,
      '#size' => 32,
    );

    $form['base']['prices'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('uc-inline-form', 'clearfix')),
      '#weight' => 5,
    );

    $form['base']['prices']['list_price'] = array(
      '#type' => 'uc_price',
      '#title' => t('List price'),
      '#default_value' => $node->list_price,
      '#description' => t('The listed MSRP.'),
      '#weight' => 0,
    );
    $form['base']['prices']['cost'] = array(
      '#type' => 'uc_price',
      '#title' => t('Cost'),
      '#default_value' => $node->cost,
      '#description' => t("Your store's cost."),
      '#weight' => 1,
    );
    $form['base']['prices']['sell_price'] = array(
      '#type' => 'uc_price',
      '#title' => t('Sell price'),
      '#required' => TRUE,
      '#default_value' => $node->sell_price,
      '#description' => t('Customer purchase price.'),
      '#weight' => 2,
    );

    $form['base']['shippable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Product is shippable.'),
      '#default_value' => $node->shippable,
      '#weight' => 10,
    );

    $form['base']['weight'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('uc-inline-form', 'clearfix')),
      '#states' => array(
        'invisible' => array(
          'input[name="shippable"]' => array('checked' => FALSE),
        ),
      ),
      '#weight' => 15,
    );
    $form['base']['weight']['weight'] = array(
      '#type' => 'textfield',
      '#title' => t('Weight'),
      '#default_value' => $node->weight,
      '#size' => 10,
      '#element_validate' => array('uc_store_validate_number'),
    );
    $units = array(
      'lb' => t('Pounds'),
      'kg' => t('Kilograms'),
      'oz' => t('Ounces'),
      'g' => t('Grams'),
    );
    $form['base']['weight']['weight_units'] = array(
      '#type' => 'select',
      '#title' => t('Units'),
      '#default_value' => $node->weight_units,
      '#options' => $units,
    );

    $form['base']['dimensions'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('uc-inline-form', 'clearfix')),
      '#states' => array(
        'invisible' => array(
          'input[name="shippable"]' => array('checked' => FALSE),
        ),
      ),
      '#weight' => 20,
    );
    $form['base']['dimensions']['dim_length'] = array(
      '#type' => 'textfield',
      '#title' => t('Length'),
      '#default_value' => $node->length,
      '#size' => 10,
      '#element_validate' => array('uc_store_validate_number'),
    );
    $form['base']['dimensions']['dim_width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width'),
      '#default_value' => $node->width,
      '#size' => 10,
      '#element_validate' => array('uc_store_validate_number'),
    );
    $form['base']['dimensions']['dim_height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height'),
      '#default_value' => $node->height,
      '#size' => 10,
      '#element_validate' => array('uc_store_validate_number'),
    );
    $form['base']['dimensions']['length_units'] = array(
      '#type' => 'select',
      '#title' => t('Units'),
      '#options' => array(
        'in' => t('Inches'),
        'ft' => t('Feet'),
        'cm' => t('Centimeters'),
        'mm' => t('Millimeters'),
      ),
      '#default_value' => $node->length_units,
    );
    $form['base']['pkg_qty'] = array(
      '#type' => 'uc_quantity',
      '#title' => t('Maximum package quantity'),
      '#default_value' => $node->pkg_qty,
      '#description' => t('At most, how many of these items can fit in your largest box? Orders that exceed this value will be split into multiple packages when retrieving shipping quotes.'),
      '#weight' => 25,
      '#states' => array(
        'invisible' => array(
          'input[name="shippable"]' => array('checked' => FALSE),
        ),
      ),
    );

    if (\Drupal::config('uc_product.settings')->get('add_to_cart_qty')) {
      $form['base']['default_qty'] = array(
        '#type' => 'uc_quantity',
        '#title' => t('Default quantity to add to cart'),
        '#default_value' => $node->default_qty,
        '#description' => t('Use 0 to disable the quantity field next to the add to cart button.'),
        '#weight' => 27,
        '#allow_zero' => TRUE,
      );
    }
    else {
      $form['base']['default_qty'] = array(
        '#type' => 'value',
        '#value' => $node->default_qty,
      );
    }

    $form['base']['ordering'] = array(
      '#type' => 'weight',
      '#title' => t('List position'),
      '#description' => t("Specify a value to set this product's position in product lists.<br />Products in the same position will be sorted alphabetically."),
      '#delta' => 25,
      '#default_value' => $node->ordering,
      '#weight' => 30,
    );

    $form['#entity_builders'][] = 'uc_product_node_builder';
  }
}

/**
 * Entity form builder to add product information to the node.
 *
 * @todo: Remove this in favor of an entity field.
 */
function uc_product_node_builder($entity_type, $entity, &$form, &$form_state) {
  $entity->model = $form_state['values']['model'];
  $entity->list_price = $form_state['values']['list_price'];
  $entity->cost = $form_state['values']['cost'];
  $entity->sell_price = $form_state['values']['sell_price'];
  $entity->weight = $form_state['values']['weight'];
  $entity->weight_units = $form_state['values']['weight_units'];
  $entity->length = $form_state['values']['dim_length'];
  $entity->width = $form_state['values']['dim_width'];
  $entity->height = $form_state['values']['dim_height'];
  $entity->length_units = $form_state['values']['length_units'];
  $entity->pkg_qty = $form_state['values']['pkg_qty'];
  $entity->default_qty = $form_state['values']['default_qty'];
  $entity->shippable = $form_state['values']['shippable'];
  $entity->ordering = $form_state['values']['ordering'];
}

/**
 * Implements hook_node_prepare_form().
 */
function uc_product_node_prepare_form(NodeInterface $node, $operation, array &$form_state) {
  if (!uc_product_is_product($node)) {
    return;
  }

  $settings = entity_load('node_type', $node->getType())->getModuleSettings('uc_product');
  $defaults = array(
    'model' => '',
    'list_price' => 0,
    'cost' => 0,
    'sell_price' => 0,
    'weight' => 0,
    'weight_units' => \Drupal::config('uc_store.settings')->get('units.weight'),
    'length' => 0,
    'width' => 0,
    'height' => 0,
    'length_units' => \Drupal::config('uc_store.settings')->get('units.length'),
    'pkg_qty' => 1,
    'default_qty' => 1,
    'shippable' => isset($settings['shippable']) ? $settings['shippable'] : TRUE,
    'ordering' => 0,
  );

  foreach ($defaults as $key => $value) {
    if (!isset($node->$key)) {
      $node->$key = $value;
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function uc_product_node_insert($node) {
  if (!uc_product_is_product($node)) {
    return;
  }

  $record = new \stdClass();
  $record->vid = $node->getRevisionId();
  $record->nid = $node->id();
  $fields = array('model', 'list_price', 'cost', 'sell_price', 'weight', 'weight_units', 'length', 'width', 'height', 'length_units', 'pkg_qty', 'default_qty', 'ordering', 'shippable');
  foreach ($fields as $name) {
    $record->$name = $node->$name;
  }
  drupal_write_record('uc_products', $record);
}

/**
 * Implements hook_node_update().
 */
function uc_product_node_update($node) {
  if (!uc_product_is_product($node)) {
    return;
  }

  $record = new \stdClass();
  $record->vid = $node->getRevisionId();
  $record->nid = $node->id();
  $fields = array('model', 'list_price', 'cost', 'sell_price', 'weight', 'weight_units', 'length', 'width', 'height', 'length_units', 'pkg_qty', 'default_qty', 'ordering', 'shippable');
  foreach ($fields as $name) {
    $record->$name = $node->$name;
  }
  if ($node->isNewRevision()) {
    drupal_write_record('uc_products', $record);
  }
  else {
    drupal_write_record('uc_products', $record, 'vid');
  }
}

/**
 * Implements hook_node_load().
 */
function uc_product_node_load($nodes) {
  $vids = array();
  foreach ($nodes as $node) {
    if (uc_product_is_product($node)) {
      $vids[$node->id()] = $node->getRevisionId();
    }
  }

  if (!empty($vids)) {
    $result = db_query('SELECT nid, model, list_price, cost, sell_price, weight, weight_units, length, width, height, length_units, pkg_qty, default_qty, ordering, shippable FROM {uc_products} WHERE vid IN (:vids)', array(':vids' => $vids));
    foreach ($result as $node) {
      foreach ($node as $field => $value) {
        $nodes[$node->nid]->$field = $value;
      }
      $nodes[$node->nid]->price = $nodes[$node->nid]->sell_price;
      $nodes[$node->nid]->display_price = $nodes[$node->nid]->sell_price;
      $nodes[$node->nid]->display_price_suffixes = array();
    }
  }
}

/**
 * Gets a specific, cloned, altered variant of a product node.
 *
 * Generally, you should always use uc_product_load_variant() instead,
 * except when node_load() cannot be invoked, e.g. when implementing
 * hook_node_load().
 *
 * @param $node
 *   The product node to alter. Throws an exception if this is already a
 *   product variant.
 * @param $data
 *   Optional data to add to the product before invoking the alter hooks.
 *
 * @return
 *   An variant of the product, altered based on the provided data.
 */
function _uc_product_get_variant($node, $data = FALSE) {
  if (!empty($node->variant)) {
    throw new Exception(t('Cannot create a variant of a variant.'));
  }
  $node = clone $node;
  if (!empty($data)) {
    $node->data = $data;
  }

  // Ensure that $node->data is an array (user module leaves it serialized).
  if (isset($node->data) && !is_array($node->data)) {
    $node->data = unserialize($node->data);
  }

  \Drupal::moduleHandler()->alter('uc_product', $node);
  $node->variant = TRUE;
  if (!isset($node->data['module'])) {
    $node->data['module'] = 'uc_product';
  }
  return $node;
}

/**
 * Loads a specific altered variant of a product node.
 *
 * The (possibly cached) base product remains unaltered.
 *
 * @param $nid
 *   The nid of the product to load.
 * @param $data
 *   Optional data to add to the product before invoking the alter hooks.
 *
 * @return
 *   A variant of the product, altered based on the provided data, or FALSE
 *   if the node is not found.
 */
function uc_product_load_variant($nid, $data = FALSE) {
  if ($node = node_load($nid)) {
    return _uc_product_get_variant($node, $data);
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_uc_product_alter().
 *
 * Invokes rules event to allow product modifications.
 */
function uc_product_uc_product_alter(&$node) {
  // rules_invoke_event('uc_product_load', $node);
}

/**
 * Implements hook_node_delete().
 */
function uc_product_node_delete($node) {
  if (!uc_product_is_product($node)) {
    return;
  }

  $features = uc_product_feature_load_multiple($node->id());
  foreach ($features as $feature) {
    uc_product_feature_delete($feature->pfid);
  }

  db_delete('uc_products')
    ->condition('nid', $node->id())
    ->execute();
}

/**
 * Dynamically replaces parts of a product view based on form input.
 *
 * If a module adds an input field to the add-to-cart form which affects some
 * aspect of a product (e.g. display price or weight), it should attach an
 * #ajax callback to that form element, and use this function in the callback
 * to build updated content for the affected fields.
 *
 * @param \Drupal\Core\Ajax\AjaxResponse $response
 *   The response object to add the Ajax commands to.
 * @param $form_state
 *   The current form state.  This must contain a 'variant' entry in the
 *   'storage' array which represents the product as configured by user input
 *   data. In most cases, this is provided automatically by
 *   AddToCartForm::validateForm().
 * @param $keys
 *   An array of keys in the built product content which should be replaced
 *   (e.g. 'display_price').
 */
function uc_product_view_ajax_commands(AjaxResponse $response, $form_state, $keys) {
  if (\Drupal::config('uc_product.settings')->get('update_node_view') && !empty($form_state['storage']['variant'])) {
    $node_div = '.uc-product-' . $form_state['storage']['variant']->nid;
    $build = node_view($form_state['storage']['variant']);
    foreach ($keys as $key) {
      if (isset($build[$key])) {
        $id = $node_div . '.' . str_replace('_', '-', $key);
        $response->addCommand(new ReplaceCommand($id, drupal_render($build[$key])));
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function uc_product_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  if (!uc_product_is_product($node)) {
    return;
  }

  uc_product_view_product($build, $node, $display, $view_mode);
}

/**
 * Renders product related content for product-type modules.
 */
function uc_product_view_product(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  // Give modules a chance to alter this product.  If it is a variant, this will
  // have been done already by uc_product_load_variant(), so we check a flag to
  // be sure not to alter twice -- cf. entity_prepare_view().
  $variant = empty($node->variant) ? _uc_product_get_variant($node) : $node;

  // Skip the add to cart form in comment reply forms.
  if (\Drupal::routeMatch()->getRouteName() != 'comment.reply') {
    // Build the 'add to cart' form, and use the updated variant based on data
    // provided by the form (e.g. attribute default options).
    if (\Drupal::moduleHandler()->moduleExists('uc_cart') && $variant->id() && empty($variant->data['display_only'])) {
      $add_to_cart_form = drupal_get_form('\Drupal\uc_product\Form\AddToCartForm', $variant);
      if (\Drupal::config('uc_product.settings')->get('update_node_view')) {
        $variant = $add_to_cart_form['node']['#value'];
      }
    }
  }

  $build['display_price'] = array(
    '#theme' => 'uc_product_price',
    '#value' => $variant->display_price,
    '#suffixes' => $variant->display_price_suffixes,
    '#attributes' => array(
      'class' => array(
        'display-price',
        'uc-product-' . $node->id(),
      ),
    ),
  );
  $build['model'] = array(
    '#theme' => 'uc_product_model',
    '#model' => $variant->model,
    '#view_mode' => $view_mode,
  );
  $build['list_price'] = array(
    '#theme' => 'uc_product_price',
    '#title' => t('List price:'),
    '#value' => $variant->list_price,
    '#attributes' => array(
      'class' => array(
        'list-price',
      ),
    ),
  );
  $build['cost'] = array(
    '#theme' => 'uc_product_price',
    '#title' => t('Cost:'),
    '#value' => $variant->cost,
    '#attributes' => array(
      'class' => array(
        'cost',
        'uc-product-' . $node->id(),
      ),
    ),
    '#access' => \Drupal::currentUser()->hasPermission('administer products'),
  );
  $build['sell_price'] = array(
    '#theme' => 'uc_product_price',
    '#title' => t('Price:'),
    '#value' => $variant->sell_price,
    '#attributes' => array(
      'class' => array(
        'sell-price',
      ),
    ),
  );
  $build['weight'] = array(
    '#theme' => 'uc_product_weight',
    '#amount' => $variant->weight,
    '#units' => $variant->weight_units,
    '#view_mode' => $view_mode,
    '#attributes' => array(
      'class' => array(
        'uc-product-' . $node->id(),
      ),
    ),
  );
  $build['dimensions'] = array(
    '#theme' => 'uc_product_dimensions',
    '#length' => $variant->length,
    '#width' => $variant->width,
    '#height' => $variant->height,
    '#units' => $variant->length_units,
    '#view_mode' => $view_mode,
  );

  if (isset($add_to_cart_form)) {
    $build['add_to_cart'] = $add_to_cart_form;
  }

  $build['#node'] = $variant;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Product classes default to using node--product.html.twig if they don't have
 * their own template.
 */
function uc_product_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  if (uc_product_is_product($variables['elements']['#node'])) {
    $suggestions[] = 'node__product';
  }
}

/**
 * Implements hook_preprocess_html().
 *
 * Adds a body class to product node pages.
 *
 * @see html.html.twig
 */
function uc_product_preprocess_html(&$variables) {
  $request = \Drupal::request();
  if ($request->attributes->has('node')) {
    if (uc_product_is_product($request->attributes->get('node'))) {
      $variables['attributes']['class'][] = 'uc-product-node';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds a default image field setting to product content types.
 */
function uc_product_form_node_type_form_alter(&$form, &$form_state) {
  $type = $form_state['controller']->getEntity();
  $settings = $type->getModuleSettings('uc_product');
  $settings += array(
    'product' => FALSE,
    'shippable' => TRUE,
    'image_field' => '',
  );

  $form['uc_product'] = array(
    '#type' => 'details',
    '#title' => t('Ubercart product settings'),
    '#group' => 'additional_settings',
    '#tree' => TRUE,
    '#parents' => array('settings', 'uc_product'),
    '#attached' => array(
      'js' => array(
        'vertical-tabs' => drupal_get_path('module', 'uc_product') . '/js/uc_product.js',
      ),
    ),
  );

  $form['uc_product']['product'] = array(
    '#type' => 'checkbox',
    '#title' => t('Content type is a product'),
    '#default_value' => $settings['product'],
    '#weight' => -10,
  );

  // Shippable.
  $form['uc_product']['shippable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Product is shippable'),
    '#default_value' => $settings['shippable'],
    '#description' => t('This setting can still be overridden on the node form.'),
    '#weight' => -5,
  );

  // Image field.
  if (!empty($type->type)) {
    $options = array('' => t('None'));
    $instances = \Drupal::entityManager()->getFieldDefinitions('node', $type->type);
    foreach ($instances as $field_name => $instance) {
      if ($instance->getType() == 'image') {
        $options[$field_name] = $instance->label();
      }
    }

    $form['uc_product']['image_field'] = array(
      '#type' => 'select',
      '#title' => t('Product image field'),
      '#default_value' => $settings['image_field'],
      '#options' => $options,
      '#description' => t('The selected field will be used on Ubercart pages to represent the products of this content type.'),
      '#weight' => -4,
    );
  }
}

/**
 * Implements hook_field_extra_fields().
 *
 * Adds the "Product information".
 */
function uc_product_field_extra_fields() {
  $extra = array();

  foreach (uc_product_types() as $type) {
    $extra['node'][$type] = array(
      'form' => array(
        'base' => array(
          'label' => t('Product information'),
          'description' => t('Product form elements.'),
          'weight' => 0,
        ),
      ),
      'display' => array(
        'display_price' => array(
          'label' => t('Display price'),
          'description' => t('High-visibility sell price.'),
          'weight' => -1,
        ),
        'model' => array(
          'label' => t('SKU'),
          'description' => t('Product SKU/model.'),
          'weight' => 0,
        ),
        'list_price' => array(
          'label' => t('List price'),
          'description' => t('The listed MSRP.'),
          'weight' => 2,
        ),
        'cost' => array(
          'label' => t('Cost'),
          'description' => t("Your store's cost."),
          'weight' => 3,
        ),
        'sell_price' => array(
          'label' => t('Sell price'),
          'description' => t('Customer purchase price.'),
          'weight' => 4,
        ),
        'weight' => array(
          'label' => t('Weight'),
          'description' => t('Physical weight (lbs, kg, etc.).'),
          'weight' => 5,
        ),
        'dimensions' => array(
          'label' => t('Dimensions'),
          'description' => t('Physical dimensions of the packaged product.'),
          'weight' => 6,
        ),
        'add_to_cart' => array(
          'label' => t('Add to cart form'),
          'description' => t('Add to cart form'),
          'weight' => 10,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_uc_product_types().
 */
function uc_product_uc_product_types() {
  $query = Drupal::entityQuery('node_type')
    ->condition('settings.uc_product.product', TRUE);
  return $query->execute();
}

/**
 * Implements hook_uc_store_status().
 *
 * Displays the status of the product image handlers.
 *
 * @see uc_product_image_defaults()
 */
function uc_product_uc_store_status() {
  $settings = entity_load('node_type', 'product')->getModuleSettings('uc_product');
  $field = $settings['image_field'];
  $instances = \Drupal::entityManager()->getFieldDefinitions('node', 'product');

  if (isset($instances[$field])) {
    $status = 'ok';
    $description = t('Product image support has been automatically configured by Ubercart.');
  }
  else {
    $status = 'warning';
    $description = t('<a href="!url">Click here</a> to automatically configure core image support.', array('!url' => url('admin/store/settings/products/defaults')))
      . ' ' . t('(This action is not required and should not be taken if you do not need images or have implemented your own image support.)');
  }

  return array(array('status' => $status, 'title' => t('Images'), 'desc' => $description));
}

/**
 * Implements hook_uc_cart_display().
 */
function uc_product_uc_cart_display($item) {
  $node = node_load($item->nid->target_id);

  $element = array();
  $element['nid'] = array('#type' => 'value', '#value' => $node->id());
  $element['module'] = array('#type' => 'value', '#value' => 'uc_product');
  $element['remove'] = array('#type' => 'submit', '#value' => t('Remove'));

  $element['title'] = array(
    '#markup' => $node->access('view') ? l($item->title, 'node/' . $node->id()) : check_plain($item->title),
  );

  $element['#total'] = $item->price * $item->qty->value;
  $element['#suffixes'] = array();
  $element['data'] = array('#type' => 'hidden', '#value' => serialize($item->data->first()->toArray()));
  $element['qty'] = array(
    '#type' => 'uc_quantity',
    '#title' => t('Quantity'),
    '#title_display' => 'invisible',
    '#default_value' => $item->qty->value,
    '#allow_zero' => TRUE,
  );

  $element['description'] = array('#markup' => '');
  if ($description = uc_product_get_description($item)) {
    $element['description']['#markup'] = $description;
  }

  return $element;
}

/**
 * Implements hook_uc_update_cart_item().
 */
function uc_product_uc_update_cart_item($nid, $data = array(), $qty, $cid = NULL) {
  if (!$nid) return NULL;
  $cid = !(is_null($cid) || empty($cid)) ? $cid : uc_cart_get_id();

  $result = Drupal::entityQuery('uc_cart_item')
    ->condition('cart_id', $cid)
    ->condition('nid', $nid)
    ->condition('data', serialize($data))
    ->execute();

  if (!empty($result)) {
    $item = entity_load('uc_cart_item', current(array_keys($result)));
    if ($item->qty->value != $qty) {
      $item->qty->value = $qty;
      $item->save();
    }
  }
}

/**
 * Implements hook_uc_add_to_cart_data().
 */
function uc_product_uc_add_to_cart_data($form_values) {
  if (isset($form_values['nid'])) {
    $node = node_load($form_values['nid']);
    $type = $node->getType();
  }
  else {
    $type = 'product';
  }

  $settings = entity_load('node_type', $type)->getModuleSettings('uc_product');
  return array(
    'shippable' => isset($node) ? $node->shippable : $settings['shippable'],
    'type' => $type,
  );
}

/**
 * Returns an array of product node types.
 */
function uc_product_types() {
  return \Drupal::moduleHandler()->invokeAll('uc_product_types');
}

/**
 * Determines whether or not a given node or node type is a product.
 *
 * @param $node
 *   Either a full node object/array, a node ID, or a node type.
 *
 * @return
 *   TRUE or FALSE indicating whether or not a node type is a product node type.
 */
function uc_product_is_product($node) {
  // Load the node object if we received an integer as an argument.
  if (is_numeric($node)) {
    $node = node_load($node);
  }

  // Determine the node type based on the data type of $node.
  if (is_object($node)) {
    $type = $node->getType();
  }
  elseif (is_array($node)) {
    $type = $node['type'];
  }
  elseif (is_string($node)) {
    $type = $node;
  }

  // If no node type was found, go ahead and return FALSE.
  if (!$type) {
    return FALSE;
  }

  // Return TRUE or FALSE depending on whether or not the node type is in the
  // product types array.
  return in_array($type, uc_product_types());
}

/**
 * Determines whether or not a given form array is a product node form.
 *
 * @param $form
 *   The form array to examine.
 *
 * @return
 *   TRUE or FALSE indicating whether or not the form is a product node form.
 */
function uc_product_is_product_form($form) {
  return !empty($form['#bundle']) && uc_product_is_product($form['#bundle']);
}

/**
 * Gets all models of a product (node).
 *
 * Gathers any modules' models on this node, then add the node's SKU and the
 * optional 'Any' option.
 *
 * @param $nid
 *   The node ID of the product.
 * @param $add_blank
 *   String to use for the initial blank entry. If not desired, set to NULL
 *   or FALSE. Make sure to localize the string first. Defaults to '- Any -'.
 *
 * @return
 *   An associative array of model numbers. The key for '- Any -' is the empty
 *   string.
 */
function uc_product_get_models($nid, $add_blank = TRUE) {
  // Get any modules' SKUs on this node.
  $models = \Drupal::moduleHandler()->invokeAll('uc_product_models', array($nid));
  // Add the base SKU of the node.
  $models[] = db_query('SELECT model FROM {uc_products} WHERE nid = :nid', array(':nid' => $nid))->fetchField();

  // Now we map the SKUs to the keys, for form handling, etc.
  $models = array_combine($models, $models);
  // Sort the SKUs.
  asort($models);

  // And finally, we prepend 'Any' so it's the first option.
  if (!empty($add_blank) || $add_blank === '') {
    if ($add_blank === TRUE) {
      $add_blank = t('- Any -');
    }
    return array('' => $add_blank) + $models;
  }

  return $models;
}

/**
 * Returns a product node's first attached image.
 *
 * @param $node_id
 *   The node's id.
 * @param $style
 *   The image style used to format the image. 'uc_product' by default.
 *
 * @return
 *   A renderable array of the first product image, linked to the
 *   product node, or an empty array if no image is available.
 */
function uc_product_get_picture($nid, $style = 'uc_product') {
  $product = node_load($nid);
  if (!$product) {
    return array();
  }
  $settings = entity_load('node_type', $product->getType())->getModuleSettings('uc_product');
  $field_name = isset($settings['image_field']) ? $settings['image_field'] : 'uc_product_image';
  $output = array();

  if ($field_name && !empty($product->$field_name)) {
    $elements = $product->$field_name->view(array(
      'label' => 'hidden',
      'type' => 'image',
      'settings' => array(
        'image_link' => 'content',
        'image_style' => $style,
      ),
    ));

    // Extract the part of the render array we need.
    $output = isset($elements[0]) ? $elements[0] : array();
    if (isset($elements['#access'])) {
      $output['#access'] = $elements['#access'];
    }
  }

  return $output;
}

/**
 * Returns HTML for the product description.
 *
 * Modules adding information use hook_uc_product_description() and modules
 * wanting to alter the output before rendering can do so by implementing
 * hook_uc_product_description_alter(). By default, all descriptions supplied
 * by modules via hook_uc_product_description() are concatenated together.
 *
 * NOTE: hook_uc_product_description() supercedes the deprecated
 * hook_cart_item_description().
 *
 * @param $product
 *   Product.
 *
 * @return
 *   HTML rendered product description.
 */
function uc_product_get_description($product) {
  // Run through implementations of hook_uc_product_description().
  $description = \Drupal::moduleHandler()->invokeAll('uc_product_description', array($product));

  // Now allow alterations via hook_uc_product_description_alter().
  \Drupal::moduleHandler()->alter('uc_product_description', $description, $product);

  return drupal_render($description);
}

/**
 * Returns data for a product feature, given a feature ID and array key.
 *
 * @param $fid
 *   The string ID of the product feature you want to get data from.
 * @param $key
 *   The key in the product feature array you want: title, callback, delete,
 *   settings.
 *
 * @return
 *   The value of the key you specify.
 */
function uc_product_feature_data($fid, $key) {
  static $features;

  if (empty($features)) {
    foreach (\Drupal::moduleHandler()->invokeAll('uc_product_feature') as $feature) {
      $features[$feature['id']] = $feature;
    }
  }

  return $features[$fid][$key];
}

/**
 * Saves a product feature to a product node.
 *
 * @param $data
 *   An array consisting of the following keys:
 *   - pfid: (optional) When editing an existing product feature, the numeric
 *     ID of the feature.
 *   - nid: The numeric ID of the product node.
 *   - fid: The string ID of the feature type.
 *   - description: The string describing the feature for the overview table.
 */
function uc_product_feature_save(&$data) {
  if (empty($data['nid']) && arg(0) == 'node' && intval(arg(1)) > 0) {
    $data['nid'] = intval(arg(1));
  }
  if (empty($data['pfid'])) {
    if (arg(0) == 'node' && arg(3) == 'features' && intval(arg(5)) > 0) {
      $data['pfid'] = intval(arg(5));
    }
  }

  // First attempt to update an existing row.
  $result = drupal_write_record('uc_product_features', $data, !empty($data['pfid']) ? 'pfid' : array());

  // Otherwise insert this feature as a new row.
  if ($result == SAVED_NEW) {
    drupal_set_message(t('The product feature has been added.'));
  }
  elseif ($result == SAVED_UPDATED) {
    drupal_set_message(t('The product feature has been updated.'));
  }
  else {
    drupal_set_message(t('The product feature was unable to be saved.'));
  }

  return 'node/' . $data['nid'] . '/edit/features';
}

/**
 * Loads all product feature for a node.
 *
 * @param $nid
 *   The product node ID.
 *
 * @return
 *   The array of all product features object.
 */
function uc_product_feature_load_multiple($nid) {
  $features = db_query("SELECT * FROM {uc_product_features} WHERE nid = :nid ORDER BY pfid ASC", array(':nid' => $nid))->fetchAllAssoc('pfid');

  return $features;
}

/**
 * Loads a product feature object.
 *
 * @todo: should return an object instead of array.
 *
 * @param $pfid
 *   The product feature ID.
 * @param $fid
 *   Optional. Specify a specific feature id.
 *
 * @return
 *   The product feature array.
 */
function uc_product_feature_load($pfid) {
  $feature = db_query("SELECT * FROM {uc_product_features} WHERE pfid = :pfid", array(':pfid' => $pfid))->fetchAssoc();

  return $feature;
}

/**
 * Deletes a product feature object.
 *
 * @param $pfid
 *   The product feature ID.
 *
 * @return
 *   The product feature object.
 */
function uc_product_feature_delete($pfid) {
  $feature = uc_product_feature_load($pfid);

  // Call the delete function for this product feature if it exists.
  $func = uc_product_feature_data($feature['fid'], 'delete');
  if (function_exists($func)) {
    $func($feature);
  }
  db_delete('uc_product_features')
    ->condition('pfid', $pfid)
    ->execute();

  return SAVED_DELETED;
}

/**
 * Implements hook_node_type_insert().
 */
function uc_product_node_type_insert(NodeTypeInterface $type) {
  $settings = $type->getModuleSettings('uc_product');
  if (!empty($settings['product'])) {
    uc_product_add_default_image_field($type->id());

    $defaults = array(
      'model' => '',
      'list_price' => 0,
      'cost' => 0,
      'sell_price' => 0,
      'weight' => 0,
      'weight_units' => \Drupal::config('uc_store.settings')->get('units.weight'),
      'length' => 0,
      'width' => 0,
      'height' => 0,
      'length_units' => \Drupal::config('uc_store.settings')->get('units.length'),
      'pkg_qty' => 1,
      'default_qty' => 1,
      'shippable' => isset($settings['shippable']) ? $settings['shippable'] : TRUE,
      'ordering' => 0,
    );
    $result = db_query("SELECT n.vid, n.nid FROM {node} n LEFT JOIN {uc_products} p ON n.vid = p.vid WHERE n.type = :type AND p.vid IS NULL", array(':type' => $type->id()));
    foreach ($result as $node) {
      db_insert('uc_products')
        ->fields($defaults + array(
          'nid' => $node->nid,
          'vid' => $node->vid,
        ))
        ->execute();
    }
  }
}

/**
 * Implements hook_node_type_update().
 */
function uc_product_node_type_update(NodeTypeInterface $type) {
  $original_settings = $type->original->getModuleSettings('uc_product');
  if (empty($original_settings['product'])) {
    uc_product_node_type_insert($type);
  }
}

/**
 * Creates a file field with an image field widget, and attach it to products.
 *
 * This field is used by default on the product page, as well as on the cart
 * and catalog pages to represent the products they list. Instances are added
 * to new product classes, and other node types that claim product-ness should
 * call this function for themselves.
 *
 * @param $type
 *   The content type to which the image field is to be attached. This may be a
 *   a single type as a string, or an array of types. If NULL, all product
 *   types get an instance of the field.
 */
function uc_product_add_default_image_field($type = NULL) {
  $field = FieldConfig::loadByName('node', 'uc_product_image');

  // Set up field if it doesn't exist.
  if (!$field) {
    $field = entity_create('field_config', array(
      'entity_type' => 'node',
      'name' => 'uc_product_image',
      'type' => 'image',
      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
      'settings' => array(
        'display_field' => 0,
      ),
    ));
    $field->save();
  }

  $label = t('Image');
  $new_instance = array(
    'entity_type' => 'node',
    'label' => $label,
    'weight' => -2,
  );

  if ($type) {
    // Accept single or multiple types as input.
    $types = (array) $type;
  }
  else {
    $types = uc_product_types();
  }
  foreach ($types as $type) {
    $new_instance['bundle'] = $type;

    $settings = entity_load('node_type', $type)->getModuleSettings('uc_product');
    $field_name = !empty($settings['image_field']) ? $settings['image_field'] : 'uc_product_image';
    $new_instance['field_name'] = $field_name;

    $instance = FieldInstanceConfig::loadByName('node', $field_name, $type);

    // Only add the instance if it doesn't exist. Don't overwrite any changes.
    if (!$instance) {
      $instance = entity_create('field_instance_config', $new_instance);
      $instance->save();

      \Drupal::config('node.type.' . $type)
        ->set('settings.uc_product.image_field', $field_name)
        ->save();

      entity_get_form_display('node', $type, 'default')
        ->setComponent($field_name, array(
          'type' => 'image_image',
        ))
        ->save();

      entity_get_display('node', $type, 'default')
        ->setComponent($field_name, array(
          'label' => 'hidden',
          'type' => 'uc_product_image',
        ))
        ->save();

      entity_get_display('node', $type, 'teaser')
        ->setComponent($field_name, array(
          'label' => 'hidden',
          'type' => 'uc_product_image',
        ))
        ->save();
    }
  }
}

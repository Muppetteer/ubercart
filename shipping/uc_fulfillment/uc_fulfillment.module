<?php

/**
 * @file
 * Organizes ordered products into packages and sets them up for shipment.
 * Shipping method modules may add functionality to generate shipping labels
 * and tracking numbers.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\uc_order\Entity\Order;
use Drupal\uc_order\OrderInterface;

/**
 * Implements hook_help().
 */
function uc_fulfillment_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'uc_fulfillment.new_package':
      return '<p>' . t('Organize products into packages. Package numbers in multiple shipping types are of the first shipping type they appear in. All packages are given a unique ID when they are saved. Choose the default package "Sep." to automatically create a package for each of the selected quantity of products in that row.') . '</p>';
      break;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function uc_fulfillment_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'admin/store/orders/%/shipments') {
    $order = $router_item['page_arguments'][0];
    $item = menu_get_item('admin/store/orders/' . $order->id() . '/packages/new');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_theme().
 */
function uc_fulfillment_theme() {
  return array(
    'uc_fulfillment_edit_package_fieldset' => array(
      'render element' => 'fieldset',
      'function' => 'theme_uc_fulfillment_edit_package_fieldset',
    ),
    'uc_fulfillment_shipment_print' => array(
      'variables' => array('order' => NULL, 'shipment' => NULL, 'labels' => TRUE),
      'function' => 'theme_uc_fulfillment_shipment_print',
    ),
    'uc_packing_slip' => array(
      'variables' => array('order' => NULL, 'shipment' => NULL),
      'template' => 'uc-packing-slip',
    ),
    'uc_packing_slip_page' => array(
      'variables' => array('content' => NULL),
      'template' => 'uc-packing-slip-page',
    ),
  );
}

/**
 * Preprocess function to make tokens available in the packing slip template.
 *
 * @see uc-packing-slip.tpl.php
 */
function template_preprocess_uc_packing_slip(&$variables) {
  $token_service = \Drupal::token();
  $bubbleable_metadata = new BubbleableMetadata();

  $tokens = $token_service->generate('site', ['logo' => 'logo'], [], [], $bubbleable_metadata);
  $variables['site_logo'] = isset($tokens['logo']) ? $tokens['logo'] : '';

  $tokens = $token_service->generate('store', ['name' => 'name', 'address' => 'address', 'phone' => 'phone'], [], [], $bubbleable_metadata);
  $variables['store_name'] = $tokens['name'];
  $variables['store_address'] = $tokens['address'];
  $variables['store_phone'] = $tokens['phone'];

  $order = $variables['order'];
  $variables['order_link'] = Link::createFromRoute($order->id(), 'uc_order.user_view', ['user' => $order->getOwnerId(), 'uc_order' => $order->id()], ['absolute' => TRUE])->toString();
  $variables['order_email'] = $order->getEmail();
  $variables['billing_address'] = $order->getAddress('billing');
  $variables['billing_phone'] = $order->getAddress('billing')->phone;
  $variables['shipping_address'] = $order->getAddress('delivery');
  $variables['shipping_phone'] = $order->getAddress('delivery')->phone;

  if (\Drupal::moduleHandler()->moduleExists('uc_payment')) {
    $variables['payment_method'] = \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order)->cartReviewTitle();
  }
  else {
    $variables['payment_method'] = '';
  }

  $shipment = $variables['shipment'];
  $variables['carrier'] = $shipment->carrier;
  $variables['tracking_number'] = $shipment->tracking_number;
  $variables['packages'] = $shipment->packages;
}

/**
 * Preprocesses a printable packing slip page.
 *
 * @see uc-packing-slip-page.tpl.php
 */
function template_preprocess_uc_packing_slip_page(&$variables) {
  $language = isset($GLOBALS['language']) ? $GLOBALS['language'] : \Drupal::languageManager()->getDefaultLanguage();
  $variables['language'] = $language;
  $variables['language']->dir = $language->direction ? 'rtl' : 'ltr';
}

/**
 * Implements hook_uc_order_actions().
 */
function uc_fulfillment_uc_order_actions($order) {
  $actions = array();
  $account = \Drupal::currentUser();
  if ($account->hasPermission('fulfill orders')) {
    $result = db_query('SELECT COUNT(nid) FROM {uc_order_products} WHERE order_id = :id AND data LIKE :data', [':id' => $order->id(), ':data' => '%s:9:\"shippable\";s:1:\"1\";%']);
    if ($result->fetchField()) {
      $actions['package'] = array(
        'title' => t('Package'),
        'url' => Url::fromRoute('uc_fulfillment.packages', ['uc_order' => $order->id()])->toString(),
        'weight' => 12,
      );
      $result = db_query('SELECT COUNT(package_id) FROM {uc_packages} WHERE order_id = :id', [':id' => $order->id()]);
      if ($result->fetchField()) {
        $actions['ship'] = array(
          'title' => t('Ship'),
          'url' => Url::fromRoute('uc_fulfillment.shipments', ['uc_order' => $order->id()])->toString(),
          'weight' => 13,
        );
      }
    }
  }
  return $actions;
}

/**
 * Loads a package and its products.
 */
function uc_fulfillment_package_load($package_id) {
  static $packages = array();

  if (!isset($packages[$package_id])) {
    $result = db_query('SELECT * FROM {uc_packages} WHERE package_id = :id', [':id' => $package_id]);
    if ($package = $result->fetchObject()) {
      $products = array();
      $description = '';
      $weight = 0;
      $units = \Drupal::config('uc_store.settings')->get('weight.units');
      $addresses = array();
      $result = db_query('SELECT op.order_product_id, pp.qty, pp.qty * op.weight AS weight, op.weight_units, op.nid, op.title, op.model, op.price, op.data FROM {uc_packaged_products} pp LEFT JOIN {uc_order_products} op ON op.order_product_id = pp.order_product_id WHERE pp.package_id = :id ORDER BY op.order_product_id', [':id' => $package_id]);
      foreach ($result as $product) {
        $address = uc_quote_get_default_fulfillment_address($product->nid);
        // TODO: Lodge complaint that array_unique() compares as strings.
        if (!in_array($address, $addresses)) {
          $addresses[] = $address;
        }
        $description .= ', ' . $product->qty->value . ' x ' . $product->model->value;
        // Normalize all weights to default units.
        $weight += $product->weight * uc_weight_conversion($product->weight_units, $units);
        $product->data = unserialize($product->data);
        $products[$product->order_product_id] = $product;
      }
      $package->addresses = $addresses;
      $package->description = substr($description, 2);
      $package->weight = $weight;
      $package->weight_units = $units;
      $package->products = $products;

      if ($package->label_image && $image = file_load($package->label_image)) {
        $package->label_image = $image;
      }
      else {
        unset($package->label_image);
      }

      $packages[$package_id] = $package;
    }
    else {
      return FALSE;
    }
  }

  return $packages[$package_id];
}

/**
 * Saves a package.
 */
function uc_fulfillment_package_save($package) {
  $package = (object)$package;

  if (!isset($package->package_id)) {
    $package->package_id = db_insert('uc_packages')
      ->fields(array('order_id' => $package->order_id))
      ->execute();
  }

  if (isset($package->products) && $package->products) {
    $insert = db_insert('uc_packaged_products')
      ->fields(array('package_id', 'order_product_id', 'qty'));

    foreach ($package->products as $id => $product) {
      $insert->values(array(
          'package_id' => $package->package_id,
          'order_product_id' => $id,
          'qty' => $product->qty,
        ));

      $result = db_query('SELECT data FROM {uc_order_products} WHERE order_product_id = :id', [':id' => $id]);
      if ($order_product = $result->fetchObject()) {
        $order_product->data = unserialize($order_product->data);
        $order_product->data['package_id'] = intval($package->package_id);

        db_update('uc_order_products')
          ->fields(array('data' => serialize($order_product->data)))
          ->condition('order_product_id', $id)
          ->execute();
      }
    }

    db_delete('uc_packaged_products')
      ->condition('package_id', $package->package_id)
      ->execute();

    $insert->execute();
  }

  $fields = array(
    'order_id' => $package->order_id,
    'shipping_type' => $package->shipping_type,
  );

  if (isset($package->pkg_type)) {
    $fields['pkg_type'] = $package->pkg_type;
  }
  if (isset($package->length) && isset($package->width) && isset($package->height) && isset($package->length_units)) {
    $fields['length'] = $package->length;
    $fields['width'] = $package->width;
    $fields['height'] = $package->height;
    $fields['length_units'] = $package->length_units;
  }
  if (isset($package->value)) {
    $fields['value'] = $package->value;
  }
  if (isset($package->sid)) {
    $fields['sid'] = $package->sid;
  }
  if (isset($package->tracking_number)) {
    $fields['tracking_number'] = $package->tracking_number;
  }
  if (isset($package->label_image) && is_object($package->label_image)) {
    $fields['label_image'] = $package->label_image->fid;
  }

  db_update('uc_packages')
    ->fields($fields)
    ->condition('package_id', $package->package_id)
    ->execute();
}

/**
 * Deletes a package.
 */
function uc_fulfillment_package_delete($package_id) {
  // @todo: Make these delete functions take the actual object.
  $package = uc_fulfillment_package_load($package_id);

  db_delete('uc_packages')
    ->condition('package_id', $package_id)
    ->execute();
  db_delete('uc_packaged_products')
    ->condition('package_id', $package_id)
    ->execute();

  if (isset($package->label_image)) {
    file_usage_delete($package->label_image, 'uc_fulfillment', 'package', $package_id);
    file_delete($package->label_image);
  }

  drupal_set_message(t('Package @id has been deleted.', ['@id' => $package_id]));
}

/**
 * Loads a shipment and its packages.
 */
function uc_fulfillment_shipment_load($shipment_id) {
  $shipment = db_query('SELECT * FROM {uc_shipments} WHERE sid = :sid', [':sid' => $shipment_id])->fetchObject();
  if ($shipment) {
    $result = db_query('SELECT package_id FROM {uc_packages} WHERE sid = :sid', [':sid' => $shipment_id]);
    $packages = array();
    foreach ($result as $package) {
      $packages[$package->package_id] = uc_fulfillment_package_load($package->package_id);
    }
    $shipment->packages = $packages;

    $extra = \Drupal::moduleHandler()->invokeAll('uc_shipment', array('load', $shipment));
    if (is_array($extra)) {
      foreach ($extra as $key => $value) {
        $shipment->$key = $value;
      }
    }
  }

  return $shipment;
}

/**
 * Saves a shipment.
 */
function uc_fulfillment_shipment_save($shipment) {
  if (isset($shipment->origin)) {
    foreach ($shipment->origin as $field => $value) {
      $field = 'o_' . $field;
      $shipment->$field = $value;
      $fields[$field] = $value;
    }
  }
  if (isset($shipment->destination)) {
    foreach ($shipment->destination as $field => $value) {
      $field = 'd_' . $field;
      $shipment->$field = $value;
      $fields[$field] = $value;
    }
  }

  $shipment->changed = time();

  if (!isset($shipment->sid)) {
    drupal_write_record('uc_shipments', $shipment);
    $shipment->is_new = TRUE;
  }
  else {
    drupal_write_record('uc_shipments', $shipment, 'sid');
    $shipment->is_new = FALSE;
  }

  if (is_array($shipment->packages)) {
    foreach ($shipment->packages as $package) {
      $package->sid = $shipment->sid;
      // Since the products haven't changed, we take them out of the object so
      // that they are not deleted and re-inserted.
      $products = $package->products;
      unset($package->products);
      uc_fulfillment_package_save($package);
      // But they're still necessary for hook_uc_shipment(), so they're added
      // back in.
      $package->products = $products;
    }
  }

  \Drupal::moduleHandler()->invokeAll('uc_shipment', array('save', $shipment));
  $order = Order::load($shipment->order_id);
  // rules_invoke_event('uc_shipment_save', $order, $shipment);
}

/**
 * Deletes a shipment.
 */
function uc_fulfillment_shipment_delete($shipment_id) {
  $shipment = uc_fulfillment_shipment_load($shipment_id);

  db_update('uc_packages')
    ->fields(array(
      'sid' => NULL,
      'tracking_number' => NULL,
      'label_image' => NULL,
    ))
    ->condition('sid', $shipment_id)
    ->execute();

  db_delete('uc_shipments')
    ->condition('sid', $shipment_id)
    ->execute();

  foreach ($shipment->packages as $package) {
    if (isset($package->label_image)) {
      file_delete($package->label_image);
      unset($package->label_image);
    }
  }

  \Drupal::moduleHandler()->invokeAll('uc_shipment', array('delete', $shipment));
}

/**
 * Chooses an address to fill out a form.
 */
function uc_fulfillment_select_address($addresses, $onchange = '', $title = NULL) {
  if (!is_array($addresses) || count($addresses) == 0) {
    $addresses = array();
  }
  $quote_config = \Drupal::config('uc_quote.settings');
  $store_address = $quote_config->get('store_default_address');
  if (!in_array($store_address, $addresses)) {
    $addresses[] = $store_address;
  }

  $blank = array(
    'first_name' => '',
    'last_name' => '',
    'phone' => '',
    'company' => '',
    'street1' => '',
    'street2' => '',
    'city' => '',
    'postal_code' => '',
    'country' => 0,
    'zone' => 0,
  );
  $options = array(Json::encode($blank) => t('- Reset fields -'));
  foreach ($addresses as $address) {
    $options[Json::encode($address)] = $address->company . ' ' . $address->street1 . ' ' . $address->city;
  }

  $select = array(
    '#type' => 'select',
    '#title' => is_null($title) ? t('Address book') : $title,
    '#options' => $options,
    '#default_value' => Json::encode($addresses[0]),
    '#attributes' => array('onchange' => $onchange),
  );

  return $select;
}

/**
 * Helper function for addresses in forms.
 *
 * @ingroup forms
 */
function uc_fulfillment_address_form($form, FormStateInterface $form_state, $addresses, $order) {
  drupal_add_js(drupal_get_path('module', 'uc_fulfillment') . '/js/uc_fulfillment.js');

  $form['origin'] = array(
    '#type' => 'fieldset',
    '#title' => t('Origin address'),
    '#weight' => -2,
  );
  $form['origin']['pickup_address_select'] = uc_fulfillment_select_address($addresses, 'apply_address(\'pickup\', this.value);', t('Saved Addresses'));
  $form['origin']['pickup_address_select']['#weight'] = -2;
  $form['origin']['pickup_email'] = array(
    '#type' => 'email',
    '#title' => t('E-mail'),
    '#default_value' => uc_store_email(),
    '#weight' => -1,
  );
  $form['origin']['pickup_email']['#weight'] = -1;
  $form['origin']['pickup_address']['#tree'] = TRUE;
  $form['origin']['pickup_address']['pickup_address'] = array(
    '#type' => 'uc_address',
    '#default_value' => reset($addresses),
    '#required' => FALSE,
  );

  $form['destination'] = array(
    '#type' => 'fieldset',
    '#title' => t('Destination address'),
    '#weight' => -1,
  );
  if ($form_state->hasValue('delivery_country')) {
    $order->delivery_country = $form_state->getValue('delivery_country');
  }
  $form['destination']['delivery_email'] = array(
    '#type' => 'email',
    '#title' => t('E-mail'),
    '#default_value' => $order->getEmail(),
    '#weight' => -1,
  );
  $form['destination']['delivery_email']['#weight'] = -1;
  $form['destination']['delivery_address'] = array(
    '#type' => 'uc_address',
    '#default_value' => $order,
    '#required' => FALSE,
    '#key_prefix' => 'delivery',
  );
  return $form;
}

/**
 * Implements hook_uc_order_can_delete().
 *
 * Prevent users from deleting orders with a shipment or package that has
 * a tracking number, unless the user has administrative privileges or the
 * "Unconditionally delete orders" permission.
 */
function uc_fulfillment_uc_order_can_delete(OrderInterface $order) {
  // Find and check the shipments for tracking numbers.
  // {uc_shipments}.tracking_number is NOT NULL.
  $shipment_count = db_select('uc_shipments')
    ->condition('order_id', $order->id())
    ->condition('tracking_number', '', '<>')
    ->countQuery()
    ->execute()
    ->fetchField();
  if ($shipment_count > 0) {
    return FALSE;
  }

  // Find and check the packages.
  $package_count = db_select('uc_packages')
    ->condition('order_id', $order->id())
    ->isNotNull('tracking_number')
    ->condition('tracking_number', '', '<>')
    ->countQuery()
    ->execute()
    ->fetchField();
  if ($package_count > 0) {
    return FALSE;
  }
}

/**
 * Implements hook_uc_order_delete().
 */
function uc_fulfillment_uc_order_delete(OrderInterface $order) {
  // Find and delete the shipments.
  $shipment_ids = db_select('uc_shipments')
    ->fields(NULL, array('sid'))
    ->condition('order_id', $order->id())
    ->execute()
    ->fetchCol();
  foreach ($shipment_ids as $sid) {
    uc_fulfillment_shipment_delete($sid);
  }

  // Find and delete the packages.
  $package_ids = db_select('uc_packages')
    ->fields(NULL, array('package_id'))
    ->condition('order_id', $order->id())
    ->execute()
    ->fetchCol();
  foreach ($package_ids as $pid) {
    uc_fulfillment_package_delete($pid);
  }
}

/**
 * Displays the packing slip and shipping labels for printing.
 *
 * @ingroup themeable
 */
function theme_uc_fulfillment_shipment_print(array $variables) {
  $order = $variables['order'];
  $shipment = $variables['shipment'];
  $labels = $variables['labels'];

  $output = theme('uc_packing_slip', array('order' => $order, 'shipment' => $shipment));

  if ($labels) {
    foreach ($shipment->packages as $id => $package) {
      if (isset($package->label_image) &&
          file_exists($package->label_image->uri)) {
        // TODO: Find a way to store these magic numbers specifically for UPS.
        list($width, $height) = array(672, 392);
        $output .= '<br class="page-break" />' . "\n";
        $output .= theme('image', array(
          'uri' => $package->label_image->uri,
          'attributes' => array('width' => $width, 'height' => $height),
          'getsize' => FALSE,
        )) . "\n";
      }
    }
  }

  return $output;
}

  /**
   * Displays a formatted shipping type fieldset.
   *
   * @ingroup themeable
   */
  function theme_uc_fulfillment_edit_package_fieldset(array $variables) {
    $fieldset = $variables['fieldset'];
//    drupal_add_js('misc/tableselect.js');

    $output = '';
    $header = array(array('class' => array('select-all')), t('SKU'), t('Title'), t('Quantity'));
    $rows = array();
    foreach (Element::children($fieldset) as $op_id) {
      $row = array();
      $row[] = drupal_render($fieldset[$op_id]['checked']);
      $row[] = drupal_render($fieldset[$op_id]['model']);
      $row[] = drupal_render($fieldset[$op_id]['name']);
      $row[] = drupal_render($fieldset[$op_id]['qty']);
      $rows[] = $row;
    }
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
    $output .= drupal_render_children($fieldset);

    return $output;
  }

  /**
   * Formats and displays the new shipment form.
   *
   * @see uc_fulfillment_new_shipment()
   * @ingroup themeable
   */
  function theme_uc_fulfillment_new_shipment(array $variables) {
    $form = $variables['form'];
//    drupal_add_js('misc/tableselect.js');

    $output = '';
    $header = array(array('class' => array('select-all')), t('Package'), t('Products'), t('Weight'));
    foreach (Element::children($form['shipping_types']) as $shipping_type) {
      $rows = array();
      foreach (Element::children($form['shipping_types'][$shipping_type]['packages']) as $package_id) {
        $row = array();
        $row[] = drupal_render($form['shipping_types'][$shipping_type]['packages'][$package_id]['checked']);
        $row[] = drupal_render($form['shipping_types'][$shipping_type]['packages'][$package_id]['package_id']);
        $row[] = drupal_render($form['shipping_types'][$shipping_type]['packages'][$package_id]['products']);
        $row[] = drupal_render($form['shipping_types'][$shipping_type]['packages'][$package_id]['weight']);
        $rows[] = $row;
      }
      if (count($rows)) {
        $form['shipping_types'][$shipping_type]['packages']['table'] = array(
          '#theme' => 'table',
          '#header' => $header,
          '#rows' => $rows,
        );
      }
    }

    $output .= drupal_render_children($form);

    return $output;
  }

/**
 * Implements hook_uc_shipping_type().
 */
function uc_fulfillment_uc_shipping_type() {
  $quote_config = \Drupal::config('uc_quote.settings');
  $weight = $quote_config->get('type_weight', array('envelope' => -1, 'small_package' => 0));

  $types = array(
    'envelope' => array(
      'id' => 'envelope',
      'title' => t('Envelope'),
      'weight' => isset($weight['envelope']) ? $weight['envelope'] : -1,
    ),
    'small_package' => array(
      'id' => 'small_package',
      'title' => t('Small package'),
      'weight' => isset($weight['small_package']) ? $weight['small_package'] : 0,
    ),
  );

  return $types;
}

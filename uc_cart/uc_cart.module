<?php

/**
 * @file
 * Handles all things concerning Ubercart's shopping cart.
 *
 * The Ubercart cart system functions much like the e-commerce cart at its base
 * level... in fact, most carts do.  This module handles the cart display,
 * adding items to a cart, and checking out.  The module enables the cart,
 * products, and checkout to be extensible.
 */

use Drupal\Component\Utility\Url;

require_once dirname(__FILE__) . '/uc_cart_checkout_pane.inc';

/**
 * Time in seconds after which a cart order is deemed abandoned.
 */
define('UC_CART_ORDER_TIMEOUT', 86400); // 24 hours

/**
 * Time in seconds after which the checkout page is deemed abandoned.
 */
define('UC_CART_CHECKOUT_TIMEOUT', 1800); // 30 minutes


/**
 * Implements hook_menu().
 */
function uc_cart_menu() {
  $items['admin/store/settings/cart'] = array(
    'title' => 'Cart',
    'description' => 'Configure the cart page display and settings.',
    'route_name' => 'uc_cart.cart_settings',
  );
  $items['admin/store/settings/checkout'] = array(
    'title' => 'Checkout',
    'description' => 'Configure the checkout page display and completion rules.',
    'route_name' => 'uc_cart.checkout_settings',
  );
  $items['admin/store/settings/checkout/settings'] = array(
    'title' => 'Settings',
    'description' => 'Edit the basic checkout settings.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // $items['admin/store/settings/checkout/rules'] = array(
  //   'title' => 'Rules',
  //   'description' => 'Edit the checkout rules.',
  //   'page callback' => 'uc_cart_checkout_rules',
  //   'access arguments' => array('administer store'),
  //   'type' => MENU_LOCAL_TASK,
  //   'weight' => 2,
  //   'file' => 'uc_cart.admin.inc',
  // );
  // $items += rules_ui()->config_menu('admin/store/settings/checkout/rules');

  $items['cart'] = array(
    'title' => 'Shopping cart',
    'route_name' => 'uc_cart.cart',
    'menu_name' => 'account',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function uc_cart_theme() {
  return array(
    'uc_cart_block_title' => array(
      'variables' => array(
        'title' => NULL,
        'show_icon' => FALSE,
        'cart_empty' => NULL,
        'collapsible' => TRUE,
        'collapsed' => TRUE,
      ),
      'file' => 'uc_cart.theme.inc',
    ),
    'uc_cart_block' => array(
      'variables' => array(
        'items' => NULL,
        'item_count' => NULL,
        'total' => NULL,
        'summary_links' => NULL,
        'collapsed' => TRUE,
      ),
      'template' => 'uc-cart-block',
    ),
    'uc_cart_view_form' => array(
      'render element' => 'form',
      'template' => 'uc-cart-form',
    ),
    'uc_cart_checkout_buttons' => array(
      'render element' => 'buttons',
      'file' => 'uc_cart.theme.inc',
    ),
    'uc_cart_empty' => array(
      'variables' => array(),
      'template' => 'uc-cart-empty',
    ),
    'uc_cart_review_table' => array(
      'variables' => array('items' => array(), 'show_subtotal' => TRUE),
      'file' => 'uc_cart_checkout_pane.inc',
    ),
    'uc_cart_checkout_review' => array(
      'variables' => array('panes' => NULL, 'form' => NULL),
      'file' => 'uc_cart.pages.inc',
    ),
    'uc_cart_complete_sale' => array(
      'variables' => array('message' => '', 'order' => NULL),
      'template' => 'uc-cart-complete-sale',
    ),
  );
}

/**
 * Implements hook_cron().
 */
function uc_cart_cron() {
  $cart_config = \Drupal::config('uc_cart.settings');
  // Empty anonymous carts.
  $time = strtotime($cart_config->get('anon_duration') . ' ' . $cart_config->get('anon_unit') . ' ago');
  $result = db_query("SELECT DISTINCT cart_id FROM {uc_cart_products} WHERE changed <= :changed", array(':changed' => $time));
  foreach ($result as $row) {
    if (strlen($row->cart_id) >= 22) {
      uc_cart_empty($row->cart_id);
    }
  }

  // Empty authenticated carts.
  $time = strtotime($cart_config->get('auth_duration') . ' ' . $cart_config->get('auth_unit') . ' ago');
  $result = db_query("SELECT DISTINCT cart_id FROM {uc_cart_products} WHERE changed <= :changed", array(':changed' => $time));
  foreach ($result as $row) {
    if (strlen($row->cart_id) < 22) {
      uc_cart_empty($row->cart_id);
    }
  }

  // Update status of abandoned orders.
  $result = db_query("SELECT order_id FROM {uc_orders} WHERE order_status = :status AND modified < :time",
    array(':status' => 'in_checkout', ':time' => REQUEST_TIME - UC_CART_ORDER_TIMEOUT))->fetchCol();
  foreach ($result as $order_id) {
    uc_order_update_status($order_id, 'abandoned');
  }
}

/**
 * Implements hook_node_delete().
 */
function uc_cart_node_delete($node) {
  if (uc_product_is_product($node)) {
    $result = Drupal::entityQuery('uc_cart_item')
      ->condition('nid', $node->id())
      ->execute();

    if (!empty($result)) {
      entity_delete_multiple('uc_cart_item', array_keys($result));
    }
  }
}

/**
 * Prepares variables for the cart block template.
 *
 * Default template: uc-cart-block.html.twig.
 */
function template_preprocess_uc_cart_block(&$variables) {
  $variables['attributes']['class'][] = 'cart-block-items';
  if ($variables['collapsed']) {
    $variables['attributes']['class'][] = 'collapsed';
  }

  $variables['total'] = theme('uc_price', array('price' => $variables['total']));

  foreach ($variables['items'] as $key => $item) {
    $variables['items'][$key]['price'] = theme('uc_price', array('price' => $item['price']));
  }

  $variables['summary_links'] = array(
    '#theme' => 'links',
    '#links' => $variables['summary_links'],
    '#attributes' => array('class' => 'cart-block-summary-links'),
  );
}

/**
 * Preprocesses the cart block output to include the icon.
 */
function uc_cart_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'uc_cart' && $variables['label']) {
    $variables['label'] = theme('uc_cart_block_title', array(
      'title' => $variables['label'],
      'show_icon' => $variables['configuration']['show_image'],
      'cart_empty' => !uc_cart_get_contents(),
      'collapsible' => $variables['configuration']['collapsible'],
      'collapsed' => $variables['configuration']['collapsed'],
    ));
  }
}

/**
 * Implements hook_uc_message().
 */
function uc_cart_uc_message() {
  $messages['completion_logged_in'] = '<p>' . t('Thank you for shopping at [store:name]. While logged in, you may continue shopping or <a href="[uc_order:url]">view your current order status</a> and order history.') . '</p>';
  $messages['completion_existing_user'] = '<p>' . t("Thank you for shopping at [store:name]. Your current order has been attached to the account we found matching your e-mail address.\n<br /><br />\n<a href=\"!user_url\">Login</a> to view your current order status and order history. Remember to login when you make your next purchase for a faster checkout experience!", array('!user_url' => '[site:login-url]')) . '</p>';
  $messages['completion_new_user'] = '<p>' . t("Thank you for shopping at [store:name]. A new account has been created for you here that you may use to view your current order status.\n<br /><br />\n<a href=\"!user_url\">Login</a> to your new account using the following information:\n<br /><br />\n<strong>Username:</strong> !new_username<br />\n<strong>Password:</strong> !new_password", array('!user_url' => '[site:login-url]')) . '</p>';
  $messages['completion_new_user_logged_in'] = '<p>' . t("Thank you for shopping at [store:name]. A new account has been created for you here that you may use to view your current order status.\n<br /><br />\nYour password and further instructions have been sent to your e-mail address.\n<br /><br />\nFor your convenience, you are already logged in with your newly created account.") . '</p>';

  return $messages;
}

/**
 * Implements hook_uc_checkout_pane().
 */
function uc_cart_uc_checkout_pane() {
  $panes['cart'] = array(
    'callback' => 'uc_checkout_pane_cart',
    'title' => t('Cart contents'),
    'desc' => t("Display the contents of a customer's shopping cart."),
    'weight' => 1,
    'process' => FALSE,
    'collapsible' => FALSE,
  );
  $panes['customer'] = array(
    'callback' => 'uc_checkout_pane_customer',
    'title' => t('Customer information'),
    'desc' => t('Get the necessary information to create a customer on the site.'),
    'weight' => 2,
  );
  $panes['delivery'] = array(
    'callback' => 'uc_checkout_pane_delivery',
    'title' => t('Delivery information'),
    'desc' => t('Get the information for where the order needs to ship.'),
    'weight' => 3,
    'shippable' => TRUE,
  );
  $panes['billing'] = array(
    'callback' => 'uc_checkout_pane_billing',
    'title' => t('Billing information'),
    'desc' => t('Get basic information needed to collect payment.'),
    'weight' => 4,
  );
  $panes['comments'] = array(
    'callback' => 'uc_checkout_pane_comments',
    'title' => t('Order comments'),
    'desc' => t('Allow a customer to put comments on an order.'),
    'weight' => 7,
  );

  return $panes;
}

/**
 * Implements hook_user_login().
 *
 * Updates a user's cart to include items from their anonymous session.
 */
function uc_cart_user_login($account) {
  if (!isset($_SESSION['uc_cart_id'])) {
    return;
  }

  // If there are items in the anonymous cart, consolidate them.
  if ($items = uc_cart_get_contents($_SESSION['uc_cart_id'])) {
    // Remove the anonymous cart items.
    uc_cart_empty($_SESSION['uc_cart_id']);

    // Merge the anonymous items into the user cart.
    foreach ($items as $item) {
      uc_cart_add_item($item->nid->value, $item->qty->value, $item->data, $account->id(), FALSE, FALSE, FALSE);
    }

    // Unset the anonymous cart ID, it's no longer needed.
    unset($_SESSION['uc_cart_id']);
  }
}

/**
 * Completes a sale, including adjusting order status and creating user account.
 *
 * @param $order
 *   The order object that has just been completed.
 * @param $login
 *   Whether or not to login a new user when this function is called.
 *
 * @return
 *   The HTML text of the default order completion page.
 */
function uc_cart_complete_sale($order, $login = FALSE) {
  $user = \Drupal::currentUser();

  // Ensure we have the latest order data.
  $order->data = unserialize(db_query("SELECT data FROM {uc_orders} WHERE order_id = :order_id", array(':order_id' => $order->id()))->fetchField());

  // Ensure that user creation and triggers are only run once.
  if (empty($order->data['complete_sale'])) {
    uc_cart_complete_sale_account($order);

    // Store account data.
    db_update('uc_orders')
      ->fields(array(
        'uid' => $order->getUserId(),
        'data' => serialize($order->data),
      ))
      ->condition('order_id', $order->id())
      ->execute();

    // Move an order's status from "In checkout" to "Pending".
    $status = db_query("SELECT order_status FROM {uc_orders} WHERE order_id = :order_id", array(':order_id' => $order->id()))->fetchField();
    if (uc_order_status_data($status, 'state') == 'in_checkout') {
      $status = uc_order_state_default('post_checkout');
      if (uc_order_update_status($order->id(), $status)) {
        $order->setStatusId($status);
      }
    }

    // Invoke the checkout complete trigger and hook.
    $account = $order->getUser();
    \Drupal::moduleHandler()->invokeAll('uc_checkout_complete', array($order, $account));
    // rules_invoke_event('uc_checkout_complete', $order);
  }

  $type = $order->data['complete_sale'];

  // Log in new users, if requested.
  if ($type == 'new_user' && $login && $user->isAnonymous()) {
    $type = 'new_user_logged_in';
    $account = $order->getUser();
    user_login_finalize($account);
  }

  $variables['!new_username'] = isset($order->data['new_user']['name']) ? $order->data['new_user']['name'] : '';
  $variables['!new_password'] = isset($order->password) ? $order->password : t('Your password');
  $messages = array(
    'msg_order_' . $type => uc_get_message('completion_' . $type),
  );
  $cart_config = \Drupal::config('uc_cart.settings');
  foreach ($messages as $id => &$message) {
    $message = $cart_config->get($id) ? $cart_config->get($id) : $message;
    $message = Drupal::token()->replace($message, array('uc_order' => $order));
    if ($id == 'msg_order_' . $type) {
      $message = strtr($message, $variables);
    }
  }
  $output = filter_xss_admin(implode(' ', $messages));

  // Empty that cart...
  uc_cart_empty();

  return array(
    '#theme' => 'uc_cart_complete_sale',
    '#message' => $output,
    '#order' => $order,
  );
}

/**
 * Prepares variables for the checkout completion template.
 *
 * Default template: uc-cart-complete-sale.html.twig.
 */
function template_preprocess_uc_cart_complete_sale(&$variables) {
  $variables['front_page'] = url();
}

/**
 * Link a completed sale to a user.
 *
 * @param $order
 *   The order object that has just been completed.
 */
function uc_cart_complete_sale_account($order) {
  // Order already has a user ID, so the user was logged in during checkout.
  if ($order->getUserId()) {
    $order->data['complete_sale'] = 'logged_in';
    return;
  }

  $result = db_query("SELECT uid FROM {users} WHERE mail LIKE :email", array(':email' => $order->getEmail()));

  // Email address matches an existing account.
  if ($account = $result->fetchObject()) {
    $order->setUserId($account->uid);
    $order->data['complete_sale'] = 'existing_user';
    return;
  }

  // Set up a new user.
  $cart_config = \Drupal::config('uc_cart.settings');
  $fields = array(
    'name' => uc_store_email_to_username($order->getEmail()),
    'mail' => $order->getEmail(),
    'init' => $order->getEmail(),
    'pass' => user_password(),
    'roles' => array(),
    'status' => $cart_config->get('new_customer_status_active') ? 1 : 0,
  );

  // Override the username, if specified.
  if (isset($order->data['new_user']['name'])) {
    $fields['name'] = $order->data['new_user']['name'];
  }

  // Create the account.
  $account = entity_create('user', $fields);
  $account->save();

  // Override the password, if specified.
  if (isset($order->data['new_user']['hash'])) {
    db_query("UPDATE {users} SET pass = :hash WHERE uid = :uid", array(':hash' => $order->data['new_user']['hash'], ':uid' => $account->id()));
    $account->password = t('Your password');
  }
  else {
    $account->password = $fields['pass'];
    $order->password = $fields['pass'];
  }

  // Send the customer their account details if enabled.
  if ($cart_config->get('new_customer_email')) {
    $type = $cart_config->get('new_customer_status_active') ? 'register_no_approval_required' : 'register_pending_approval';
    drupal_mail('user', $type, $order->getEmail(), uc_store_mail_recipient_langcode($order->getEmail()), array('account' => $account), uc_store_email_from());
  }

  $order->setUserId($account->id());
  $order->data['new_user']['name'] = $fields['name'];
  $order->data['complete_sale'] =  'new_user';
}

/**
 * Implements hook_uc_checkout_complete().
 *
 * Sends basic e-mail notifications if Rules is not installed.
 */
function uc_cart_uc_checkout_complete($order) {
  if (!module_exists('rules')) {
    module_load_include('inc', 'uc_order', 'uc_order.rules');

    $cart_config = \Drupal::config('uc_cart.settings');
    if ($cart_config->get('checkout_email_customer')) {
      $subject = t('Your Order at !store', array('!store' => uc_store_name()));
      uc_order_action_email_invoice($order, uc_store_email_from(), $order->getEmail(), $subject, 'customer', 'checkout-mail');
    }

    if ($cart_config->get('checkout_email_admin')) {
      $subject = t('New Order at !store', array('!store' => uc_store_name()));
      uc_order_action_email_invoice($order, uc_store_email_from(), uc_store_email(), $subject, 'admin', 'admin-mail');
    }
  }
}

/**
 * Returns the unique cart ID for the current user.
 *
 * @param $create
 *   If TRUE, a cart ID will be generated if none is set.
 *
 * @return
 *   The cart ID. If $create is FALSE, returns FALSE if no cart exists.
 */
function uc_cart_get_id($create = TRUE) {
  $user = \Drupal::currentUser();

  if ($user->isAuthenticated()) {
    return $user->id();
  }
  elseif (!isset($_SESSION['uc_cart_id']) && $create) {
    $_SESSION['uc_cart_id'] = md5(uniqid(rand(), TRUE));
  }

  return isset($_SESSION['uc_cart_id']) ? $_SESSION['uc_cart_id'] : FALSE;
}

/**
 * Grabs the items in a shopping cart for a user.
 *
 * @param $cid
 *   (optional) The cart ID to load, or NULL to load the current user's cart.
 * @param $action
 *   (optional) Carts are statically cached by default. If set to "rebuild",
 *   the cache will be ignored and the cart reloaded from the database.
 *
 * @return
 *   An array of cart items.
 */
function uc_cart_get_contents($cid = NULL, $action = NULL) {
  static $items = array();

  $cid = $cid ? $cid : uc_cart_get_id(FALSE);

  // If we didn't get a cid, return empty.
  if (!$cid) {
    return array();
  }

  if ($action == 'rebuild' || $action == 'empty') {
    unset($items[$cid]);
    // Mark the current cart order (if any) as needing to be rebuilt.  We only
    // do this if the cart is being explicitly rebuilt (i.e. after an item is
    // added, removed or altered).
    $_SESSION['uc_cart_order_rebuild'] = TRUE;
  }

  if (!isset($items[$cid])) {
    // Find all cart items associated with this cart.
    if ($action != 'empty') {
      $result = Drupal::entityQuery('uc_cart_item')
        ->condition('cart_id', $cid)
        ->sort('cart_item_id', 'ASC')
        ->execute();
      if (!empty($result)) {
        $items[$cid] = entity_load_multiple('uc_cart_item', array_keys($result), TRUE);

        // Create a bare order and attach it to each item as context.
        $order = entity_create('uc_order', array(
          'uid' => $cid,
        ));
        foreach ($items[$cid] as $item) {
          $item->order = $order;
        }
      }
      else {
        $items[$cid] = array();
      }
    }
    else {
      $items[$cid] = array();
    }

    // Allow other modules a chance to alter the fully loaded cart object.
    \Drupal::moduleHandler()->alter('uc_cart', $items[$cid]);

    // When there are no longer any items in the cart, the anonymous cart ID is
    // no longer required. To guard against unsetting the session ID in the
    // middle of an uc_cart_add_item() call, we only do this on rebuild.
    // See issue 858816 for details.
    if (($action == 'empty' || $action == 'rebuild') && empty($items[$cid]) && isset($_SESSION['uc_cart_id']) && $_SESSION['uc_cart_id'] == $cid) {
      unset($_SESSION['uc_cart_id']);
    }
  }

  return $items[$cid];
}

/**
 * Adds an item to a user's cart.
 */
function uc_cart_add_item($nid, $qty = 1, $data = NULL, $cid = NULL, $msg = TRUE, $check_redirect = TRUE, $rebuild = TRUE) {
  $cid = $cid ? $cid : uc_cart_get_id();
  $node = node_load($nid);

  if (is_null($data)) {
    $data = array('module' => 'uc_product');
  }
  if (!isset($data['module'])) {
    $data['module'] = 'uc_product';
  }

  $result = \Drupal::moduleHandler()->invokeAll('uc_add_to_cart', array($nid, $qty, $data));
  if (is_array($result) && !empty($result)) {
    foreach ($result as $row) {
      if ($row['success'] === FALSE) {
        if (isset($row['message']) && !empty($row['message'])) {
          $message = $row['message'];
        }
        else {
          $message = t('Sorry, that item is not available for purchase at this time.');
        }
        if (isset($row['silent']) && ($row['silent'] === TRUE)) {
          if ($check_redirect) {
            if (isset($_GET['destination'])) {
              drupal_goto();
            }
            $_SESSION['uc_cart_last_url'] = current_path();
            $cart_config = \Drupal::config('uc_cart.settings');
            $redirect = $cart_config->get('add_item_redirect');
            if ($redirect != '<none>') {
              return $redirect;
            }
            else {
              $query = Drupal::request()->query;
              return array(current_path(), array('query' => Url::filterQueryParameters($query->all())));
            }
          }
        }
        else {
          drupal_set_message($message, 'error');
        }
        $query = Drupal::request()->query;
        return array(current_path(), array('query' => Url::filterQueryParameters($query->all())));
      }
    }
  }

  $result = Drupal::entityQuery('uc_cart_item')
    ->condition('cart_id', $cid)
    ->condition('nid', $nid)
    ->condition('data', serialize($data))
    ->execute();

  // If the item isn't in the cart yet, add it.
  if (empty($result)) {
    $item_entity = entity_create('uc_cart_item', array(
      'cart_id' => $cid,
      'nid' => $nid,
      'qty' => $qty,
      'data' => $data,
    ));
    $item_entity->save();
    if ($msg) {
      drupal_set_message(t('<strong>@product-title</strong> added to <a href="!url">your shopping cart</a>.', array('@product-title' => $node->label(), '!url' => url('cart'))));
    }
  }
  else {
    // Update the item instead.
    if ($msg) {
      drupal_set_message(t('Your item(s) have been updated.'));
    }
    $item_entity = entity_load('uc_cart_item', current(array_keys($result)));
    $qty += $item_entity->qty->value;
    \Drupal::moduleHandler()->invoke($data['module'], 'uc_update_cart_item', array($nid, $data, min($qty, 999999), $cid));
  }

  // If specified, rebuild the cached cart items array.
  if ($rebuild) {
    uc_cart_get_contents($cid, 'rebuild');
  }

  if ($check_redirect) {
    if (isset($_GET['destination'])) {
      drupal_goto();
    }

    $_SESSION['uc_cart_last_url'] = current_path();
    $cart_config = \Drupal::config('uc_cart.settings');
    $redirect = $cart_config->get('add_item_redirect');
    if ($redirect != '<none>') {
      return $redirect;
    }
    else {
      $query = Drupal::request()->query;
      return array(current_path(), array('query' => Url::filterQueryParameters($query->all())));
    }
  }
}

/**
 * Empties a cart of its contents.
 *
 * @param $cart_id
 *   The ID of the cart, or NULL to empty the current cart.
 */
function uc_cart_empty($cart_id = NULL) {
  $cart_id = $cart_id ? $cart_id : uc_cart_get_id(FALSE);

  if (!$cart_id) {
    return;
  }

  $result = Drupal::entityQuery('uc_cart_item')
    ->condition('cart_id', $cart_id)
    ->execute();

  if (!empty($result)) {
    entity_delete_multiple('uc_cart_item', array_keys($result));
  }

  // Remove cached cart.
  uc_cart_get_contents($cart_id, 'empty');
}

/**
 * Determines whether a cart contains shippable items or not.
 */
function uc_cart_is_shippable($cart_id = NULL) {
  $items = uc_cart_get_contents($cart_id);

  foreach ($items as $item) {
    if (uc_order_product_is_shippable($item)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Removes panes from the list that match the given conditions.
 *
 * @return
 *   A checkout pane array with panes filtered out that have key values
 *   matching the combinations in the $remove array.
 */
function uc_cart_filter_checkout_panes($panes, $remove) {
  foreach ($panes as $id => $pane) {
    foreach ($remove as $key => $value) {
      if (isset($panes[$id][$key]) && $panes[$id][$key] == $value) {
        unset($panes[$id]);
      }
    }
  }

  return $panes;
}

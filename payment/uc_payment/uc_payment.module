<?php

/**
 * @file
 * Defines the payment API that lets payment modules interact with Ubercart.
 *
 * The payment system in Ubercart relies on hooks to let the main program know
 * what payment modules are installed and what their current settings are. The
 * customer can choose a payment type at checkout, and the proper information
 * will be collected to complete the purchase.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Component\Plugin\Exception\PluginException;
use Drupal\Component\Utility\Xss;
use Drupal\uc_order\Entity\Order;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\user\Entity\User;
use Drupal\uc_order\OrderInterface;

require_once dirname(__FILE__) . '/uc_payment_order_pane.inc';


/**
 * Implements hook_theme().
 */
function uc_payment_theme() {
  return array(
    'uc_payment_totals' => array(
      'variables' => array('order' => NULL),
      'template' => 'uc-payment-totals',
    ),
  );
}

/**
 * Prepares variables for the payment totals template.
 *
 * Default template: uc-payment-totals.html.twig.
 */
function template_preprocess_uc_payment_totals(&$variables) {
  $variables['line_items'] = $variables['order']->getDisplayLineItems();

  foreach ($variables['line_items'] as $key => $line) {
    $variables['line_items'][$key]['title'] = Xss::filter($line['title']);
    $variables['line_items'][$key]['amount'] = uc_currency_format($line['amount']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_cart_view_form().
 *
 * Adds express buttons for enabled payment modules directly to the cart page.
 */
function uc_payment_form_uc_cart_view_form_alter(&$form, FormStateInterface $form_state) {
  foreach (uc_payment_method_list() as $id => $method) {
    if ($method['checkout'] && isset($method['express']) && $express = $method['express'](array(), $form_state)) {
      $form['actions']['checkout'][$id] = $express;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_cart_checkout_review_form().
 *
 * If a payment method redirects off-site, add the required form to the review
 * page.
 */
function uc_payment_form_uc_cart_checkout_review_form_alter(&$form, FormStateInterface $form_state) {
  $order = $form_state->get('uc_order');
  $definition = \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order)->getPluginDefinition();

  if (isset($definition['redirect'])) {
    unset($form['actions']['submit']);
    $suffix = \Drupal::formBuilder()->getForm($definition['redirect'], $order);
    $form['#suffix'] = drupal_render($suffix);
  }
}

/**
 * Implements hook_uc_order().
 */
function uc_payment_uc_order($op, $order) {
  switch ($op) {
    case 'submit':
      return \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order)->orderSubmit($order);
  }
}

/**
 * Implements hook_uc_order_pane().
 */
function uc_payment_uc_order_pane() {
  $panes['payment'] = array(
    'callback' => 'uc_order_pane_payment',
    'title' => t('Payment'),
    'desc' => t('Specify and collect payment for an order.'),
    'class' => 'pos-left',
    'weight' => 4,
    'show' => array('view', 'edit', 'customer'),
  );

  return $panes;
}

/**
 * Implements hook_uc_order_state().
 */
function uc_payment_uc_order_state() {
  $states['payment_received'] = array(
    'title' => t('Payment received'),
    'weight' => 10,
  );

  return $states;
}

/**
 * Implements hook_uc_payment_method_checkout_alter().
 */
function uc_payment_uc_payment_method_checkout_alter(array &$methods, OrderInterface $order) {
  if (isset($methods['free_order'])) {
    if ($order->getTotal() < 0.01) {
      // Unset all other payment methods if this is a free order.
      foreach (array_keys($methods) as $key) {
        if ($key != 'free_order') {
          unset($methods[$key]);
        }
      }
    }
    else {
      // Disallow this payment method if the order is not free.
      unset($methods['free_order']);
    }
  }
}

/**
 * Processes a payment through an enabled payment gateway.
 *
 * @param $method
 *   The ID of the payment method to use to process the payment.
 * @param $order_id
 *   The ID of the order associated with this payment.
 * @param $amount
 *   The amount of the payment we're attempting to collect.
 * @param $data
 *   An array of data passed on to the payment gateway module used to process
 *   the payment for the specified payment method.
 * @param $default
 *   TRUE or FALSE to indicate we're forcing the use of the default gateway for
 *   the specified payment method. When TRUE, admin messages related to the
 *   payment will be hidden from display so customers don't see them.
 * @param $selected
 *   The ID of a payment gateway to use to process the payment; normally comes
 *   from the payment gateway select form.
 * @param $redirect
 *   TRUE or FALSE to indicate whether or not to redirect back to the admin
 *   order view page for the order referenced in $order_id.
 *
 * @return
 *   TRUE or FALSE indicating whether or not the payment was processed.
 */
function uc_payment_process_payment($method, $order_id, $amount, $data = NULL, $default = FALSE, $selected = NULL, $redirect = TRUE) {
  $result = array();

  // Get an array of enabled payment gateways available for the payment method.
  $gateways = _uc_payment_gateway_list($method, TRUE);

  // Fail if no gateways were found for the specified method.
  if (empty($gateways)) {
    // Display an error message if messages weren't silenced.
    if (!$default) {
      drupal_set_message(t('You are not able to process %type payments.', array('%type' => $method)));
    }

    return FALSE;
  }

  // Find the default gateway if requested.
  if ($default) {
    $default = variable_get('uc_payment_' . $method . '_gateway', '');
  }

  // If we only found one gateway for this payment method...
  if (count($gateways) == 1) {
    $gateway = reset($gateways);
  }
  elseif ($default && isset($gateways[$default])) {
    // The default gateway was forced.
    $gateway = $gateways[$default];
  }
  elseif ($selected && isset($gateways[$selected])) {
    // A specific gateway was selected.
    $gateway = $gateways[$selected];
  }
  else {
    // No gateway available.
    $gateway = array($method => '');
  }

  // Check to see if the function exists and process the payment.
  if (function_exists($gateway[$method])) {
    // Reset the entity cache, so the latest data saved in the credit card cache
    // is guaranteed to be available in the charge function.
    uc_order_load($order_id, TRUE);

    $result = $gateway[$method]($order_id, $amount, $data);
  }
  else {
    // Otherwise display an error message to administrators.
    $result['success'] = FALSE;
    $result['message'] = t('An error has occurred with your payment gateway. The charge function could not be found.');
    $account = \Drupal::currentUser();
    if ($account->hasPermission('administer store')) {
      drupal_set_message($result['message']);
    }
  }

  // If the payment processed successfully...
  if ($result['success'] === TRUE) {
    // Log the payment to the order if not disabled.
    if (!isset($result['log_payment']) || $result['log_payment'] !== FALSE) {
      uc_payment_enter($order_id, $method, $amount, empty($result['uid']) ? 0 : $result['uid'], empty($result['data']) ? '' : $result['data'], empty($result['comment']) ? '' : $result['comment']);
    }
  }
  else {
    // Otherwise display the failure message in the logs.
    \Drupal::logger('uc_payment')->warning('Payment failed for order @order_id: @message', ['@order_id' => $order_id, '@message' => $result['message'], 'link' => \Drupal::l(t('view order'), new Url('uc_order.admin_view', ['uc_order' => $order_id]))]);
  }

  // If we have a message for display and aren't simply charging with the
  // default gateway for a customer...
  if (!empty($result['message']) && !$default) {
    drupal_set_message($result['message']);
  }

  // Head back to the order if a redirect was specified.
  if ($redirect) {
    return new RedirectResponse(\Drupal::url('uc_order.admin_view', ['uc_order' => $order_id]));
  }

  return $result['success'];
}

/**
 * Enters a payment for an order.
 *
 * @param $order_id
 *   The order ID to apply the payment to.
 * @param $method
 *   The payment method ID.
 * @param $amount
 *   The amount of the payment.
 * @param $uid
 *   (optional) The user ID of the person logging the payment, or 0 if the
 *   payment was processed automatically.
 * @param $data
 *   (optional) Any data that should be serialized and stored with the
 *   payment.
 * @param $comment
 *   (optional) The comment to enter in the payment log.
 * @param $received
 *   (optional) The timestamp at which the payment was received.
 *
 * @return
 *   A unique ID identifying the payment.
 */
function uc_payment_enter($order_id, $method, $amount, $uid = 0, $data = NULL, $comment = '', $received = REQUEST_TIME) {
  $order = uc_order_load($order_id, TRUE);
  $account = User::load($uid);

  try {
    $method_name = \Drupal::service('plugin.manager.uc_payment.method')->createInstance($method)->cartReviewTitle();
  }
  catch (PluginException $e) {
    $method_name = t('Other');
  }

  if (is_array($data)) {
    $data = serialize($data);
  }

  $log_message = t('@method payment for @amount entered.', array('@method' => $method_name, '@amount' => uc_currency_format($amount)));
  $order->logChanges(array($log_message));

  $receipt_id = db_insert('uc_payment_receipts')
    ->fields(array(
      'order_id' => $order_id,
      'method' => $method_name,
      'amount' => $amount,
      'uid' => $uid,
      'data' => $data,
      'comment' => $comment,
      'received' => $received,
    ))
    ->execute();

  // Ensure user has an account before payment is made.
  if (\Drupal::moduleHandler()->moduleExists('uc_cart')) {
    $cart = \Drupal\uc_cart\Controller\Cart::create(\Drupal::getContainer());
    $cart->completeSale($order);
  }

  \Drupal::moduleHandler()->invokeAll('uc_payment_entered', array($order, $method, $amount, $account, $data, $comment));
  // rules_invoke_event('uc_payment_entered', $order, $account);

  return $receipt_id;
}

/**
 * Implements hook_uc_payment_entered().
 *
 * Automatically mark paid orders as "payment received".
 *
 * @todo Remove when Rules is available.
 */
function uc_payment_uc_payment_entered(OrderInterface $order) {
  if (uc_payment_balance($order) <= 0) {
    $state = $order->getStateId();
    if ($state == 'in_checkout' || $state == 'post_checkout') {
      $order->setStatusId('payment_received')->save();
    }
  }
}

/**
 * Implements hook_uc_order_load().
 */
function uc_payment_uc_order_load($orders) {
  foreach ($orders as $order) {
    if ($order->getPaymentMethodId()) {
      \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order)->orderLoad($order);
    }
  }
}

/**
 * Implements hook_uc_order_update().
 */
function uc_payment_uc_order_update(OrderInterface $order) {
  if ($order->getPaymentMethodId()) {
    \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order)->orderSave($order);
  }

  // Move non-shippable orders from "payment received" to "completed".
  // @todo Remove when Rules is available.
  if ($order->getStatusId() == 'payment_received' && !$order->isShippable()) {
    $order->setStatusId('completed')->save();
  }
}


/**
 * Implements hook_uc_order_can_delete().
 */
function uc_payment_uc_order_can_delete(OrderInterface $order) {
  if (uc_payment_load_payments($order->id()) !== FALSE) {
    return FALSE;
  }
}

/**
 * Implements hook_uc_order_delete().
 */
function uc_payment_uc_order_delete(OrderInterface $order) {
  db_delete('uc_payment_receipts')
    ->condition('order_id', $order->id())
    ->execute();

  // Call each payment method to delete method-specific data from the database.
  foreach (uc_payment_method_list() as $id => $method) {
    \Drupal::service('plugin.manager.uc_payment.method')->createInstance($id)->orderDelete($order);
  }
}

/**
 * Deletes a payment from the database.
 */
function uc_payment_delete($receipt_id) {
  if (!is_numeric($receipt_id)) {
    return FALSE;
  }

  $payment = uc_payment_load($receipt_id);
  $log_message = t('@method payment for @amount deleted.', array('@method' => $payment->method, '@amount' => uc_currency_format($payment->amount)));
  Order::load($payment->order_id)->logChanges(array($log_message));

  db_delete('uc_payment_receipts')
    ->condition('receipt_id', $receipt_id)
    ->execute();
}

/**
 * Returns the balance of payments on an order.
 */
function uc_payment_balance($order) {
  $total = $order->getTotal();
  $payments = uc_payment_load_payments($order->id());

  if ($payments === FALSE) {
    return $total;
  }

  foreach ($payments as $payment) {
    $total -= $payment->amount;
  }

  return $total;
}

/**
 * Loads a single payment from the database by receipt_id.
 */
function uc_payment_load($receipt_id) {
  if (!is_numeric($receipt_id)) {
    return FALSE;
  }

  $payment = db_query("SELECT * FROM {uc_payment_receipts} WHERE receipt_id = :id", array(':id' => $receipt_id))->fetchObject();

  return $payment;
}

/**
 * Loads an array of all the payments for an order.
 *
 * @param $order_id
 *   The order's id.
 *
 * @return
 *   Array of payment objects or FALSE if there are none.
 */
function uc_payment_load_payments($order_id) {
  $payments = db_query("SELECT * FROM {uc_payment_receipts} WHERE order_id = :id ORDER BY received ASC", array(':id' => $order_id))->fetchAll();

  if (count($payments) == 0) {
    $payments = FALSE;
  }

  return $payments;
}

/**
 * Returns a list of available payment methods plugins.
 *
 * @return array
 *   An array of payment method definitions, keyed by method ID.
 */
function uc_payment_method_list() {
  return \Drupal::service('plugin.manager.uc_payment.method')->getDefinitions();
}

/**
 * Builds a list of payment gateways defined in the enabled modules.
 */
function _uc_payment_gateway_list($filter = NULL, $enabled_only = FALSE) {
  $gateways = array();

  foreach (\Drupal::moduleHandler()->invokeAll('uc_payment_gateway') as $id => $gateway) {
    // Preserve backward compatibility for gateways with no key specified.
    if (is_numeric($id)) {
      $id = $gateway['id'];
    }

    $gateways[$id] = array_merge($gateway, array(
      'id' => $id,
      'enabled' => variable_get('uc_pg_' . $id . '_enabled', TRUE),
    ));
  }

  // Allow other modules to alter the payment gateways.
  \Drupal::moduleHandler()->alter('uc_payment_gateway', $gateways);

  foreach ($gateways as $id => $gateway) {
    if ($filter && (!isset($gateway[$filter]) || !function_exists($gateway[$filter]))) {
      unset($gateways[$id]);
      continue;
    }
    if ($enabled_only && !$gateway['enabled']) {
      unset($gateways[$id]);
    }
  }

  return $gateways;
}

/**
 * Returns data from a payment gateway by gateway ID and the array key.
 *
 * @param $gateway_id
 *   The ID of the payment gateway to query.
 * @param $key
 *   The key of the data being requested.
 *
 * @return
 *   The requested data.
 */
function _uc_payment_gateway_data($gateway_id, $key) {
  $gateways = _uc_payment_gateway_list();
  return isset($gateways[$gateway_id][$key]) ? $gateways[$gateway_id][$key] : NULL;
}
